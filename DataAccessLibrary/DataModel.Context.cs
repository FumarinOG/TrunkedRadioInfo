//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TrunkedRadioInfoEntities : DbContext
    {
        public TrunkedRadioInfoEntities()
            : base("name=TrunkedRadioInfoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<NLog> NLog { get; set; }
        public virtual DbSet<Patches> Patches { get; set; }
        public virtual DbSet<ProcessedFiles> ProcessedFiles { get; set; }
        public virtual DbSet<RadioHistory> RadioHistory { get; set; }
        public virtual DbSet<Radios> Radios { get; set; }
        public virtual DbSet<Systems> Systems { get; set; }
        public virtual DbSet<TalkgroupHistory> TalkgroupHistory { get; set; }
        public virtual DbSet<TalkgroupRadios> TalkgroupRadios { get; set; }
        public virtual DbSet<Talkgroups> Talkgroups { get; set; }
        public virtual DbSet<TempPatches> TempPatches { get; set; }
        public virtual DbSet<TempRadioHistory> TempRadioHistory { get; set; }
        public virtual DbSet<TempRadios> TempRadios { get; set; }
        public virtual DbSet<TempSystems> TempSystems { get; set; }
        public virtual DbSet<TempTalkgroupHistory> TempTalkgroupHistory { get; set; }
        public virtual DbSet<TempTalkgroupRadios> TempTalkgroupRadios { get; set; }
        public virtual DbSet<TempTalkgroups> TempTalkgroups { get; set; }
        public virtual DbSet<TempTowerFrequencies> TempTowerFrequencies { get; set; }
        public virtual DbSet<TempTowerFrequencyUsage> TempTowerFrequencyUsage { get; set; }
        public virtual DbSet<TempTowerRadios> TempTowerRadios { get; set; }
        public virtual DbSet<TempTowers> TempTowers { get; set; }
        public virtual DbSet<TempTowerTalkgroupRadios> TempTowerTalkgroupRadios { get; set; }
        public virtual DbSet<TempTowerTalkgroups> TempTowerTalkgroups { get; set; }
        public virtual DbSet<TowerFrequencies> TowerFrequencies { get; set; }
        public virtual DbSet<TowerFrequencyUsage> TowerFrequencyUsage { get; set; }
        public virtual DbSet<TowerNeighbors> TowerNeighbors { get; set; }
        public virtual DbSet<TowerRadios> TowerRadios { get; set; }
        public virtual DbSet<Towers> Towers { get; set; }
        public virtual DbSet<TowerTables> TowerTables { get; set; }
        public virtual DbSet<TowerTalkgroupRadios> TowerTalkgroupRadios { get; set; }
        public virtual DbSet<TowerTalkgroups> TowerTalkgroups { get; set; }
        public virtual DbSet<TowerFrequencyRadios> TowerFrequencyRadios { get; set; }
        public virtual DbSet<TowerFrequencyTalkgroups> TowerFrequencyTalkgroups { get; set; }
        public virtual DbSet<TempTowerFrequencyRadios> TempTowerFrequencyRadios { get; set; }
        public virtual DbSet<TempTowerFrequencyTalkgroups> TempTowerFrequencyTalkgroups { get; set; }
        public virtual DbSet<RadioHistories> RadioHistories { get; set; }
        public virtual DbSet<TalkgroupHistories> TalkgroupHistories { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual int MergeDeleteTempTables(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeDeleteTempTables", sessionIDParameter);
        }
    
        public virtual int MergePatches(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergePatches", sessionIDParameter);
        }
    
        public virtual int MergeRadioHistory(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeRadioHistory", sessionIDParameter);
        }
    
        public virtual int MergeRadios(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeRadios", sessionIDParameter);
        }
    
        public virtual int MergeRecords(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeRecords", sessionIDParameter);
        }
    
        public virtual int MergeSystems(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeSystems", sessionIDParameter);
        }
    
        public virtual int MergeTalkgroupHistory(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTalkgroupHistory", sessionIDParameter);
        }
    
        public virtual int MergeTalkgroupRadios(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTalkgroupRadios", sessionIDParameter);
        }
    
        public virtual int MergeTalkgroups(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTalkgroups", sessionIDParameter);
        }
    
        public virtual int MergeTowerFrequencyUsage(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTowerFrequencyUsage", sessionIDParameter);
        }
    
        public virtual int MergeTowerRadios(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTowerRadios", sessionIDParameter);
        }
    
        public virtual int MergeTowers(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTowers", sessionIDParameter);
        }
    
        public virtual int MergeTowerTalkgroupRadios(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTowerTalkgroupRadios", sessionIDParameter);
        }
    
        public virtual int MergeTowerTalkgroups(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTowerTalkgroups", sessionIDParameter);
        }
    
        public virtual int NLog_AddEntry_p(string machineName, string siteName, Nullable<System.DateTime> logged, string level, string userName, string message, string logger, string properties, string serverName, string port, string url, Nullable<bool> https, string serverAddress, string remoteAddress, string callSite, string exception)
        {
            var machineNameParameter = machineName != null ?
                new ObjectParameter("machineName", machineName) :
                new ObjectParameter("machineName", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("siteName", siteName) :
                new ObjectParameter("siteName", typeof(string));
    
            var loggedParameter = logged.HasValue ?
                new ObjectParameter("logged", logged) :
                new ObjectParameter("logged", typeof(System.DateTime));
    
            var levelParameter = level != null ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var loggerParameter = logger != null ?
                new ObjectParameter("logger", logger) :
                new ObjectParameter("logger", typeof(string));
    
            var propertiesParameter = properties != null ?
                new ObjectParameter("properties", properties) :
                new ObjectParameter("properties", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("serverName", serverName) :
                new ObjectParameter("serverName", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var httpsParameter = https.HasValue ?
                new ObjectParameter("https", https) :
                new ObjectParameter("https", typeof(bool));
    
            var serverAddressParameter = serverAddress != null ?
                new ObjectParameter("serverAddress", serverAddress) :
                new ObjectParameter("serverAddress", typeof(string));
    
            var remoteAddressParameter = remoteAddress != null ?
                new ObjectParameter("remoteAddress", remoteAddress) :
                new ObjectParameter("remoteAddress", typeof(string));
    
            var callSiteParameter = callSite != null ?
                new ObjectParameter("callSite", callSite) :
                new ObjectParameter("callSite", typeof(string));
    
            var exceptionParameter = exception != null ?
                new ObjectParameter("exception", exception) :
                new ObjectParameter("exception", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NLog_AddEntry_p", machineNameParameter, siteNameParameter, loggedParameter, levelParameter, userNameParameter, messageParameter, loggerParameter, propertiesParameter, serverNameParameter, portParameter, urlParameter, httpsParameter, serverAddressParameter, remoteAddressParameter, callSiteParameter, exceptionParameter);
        }
    
        public virtual ObjectResult<Patches> PatchesGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patches>("PatchesGet", idParameter);
        }
    
        public virtual ObjectResult<Patches> PatchesGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patches>("PatchesGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> PatchesGetCountForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("PatchesGetCountForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> PatchesGetCountForSystemSearch(Nullable<int> systemID, string searchText)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("PatchesGetCountForSystemSearch", systemIDParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<PatchesByDate_Result> PatchesGetForPatchByDate(Nullable<int> systemID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PatchesByDate_Result>("PatchesGetForPatchByDate", systemIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> PatchesGetForPatchByDateCount(Nullable<int> systemID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("PatchesGetForPatchByDateCount", systemIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter);
        }
    
        public virtual ObjectResult<PatchesByDate_Result> PatchesGetForPatchByDateWithPaging(Nullable<int> systemID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PatchesByDate_Result>("PatchesGetForPatchByDateWithPaging", systemIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Patches> PatchesGetForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patches>("PatchesGetForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Patches> PatchesGetForSystem(Nullable<int> systemID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patches>("PatchesGetForSystem", mergeOption, systemIDParameter);
        }
    
        public virtual ObjectResult<Patches_Result> PatchesGetForSystemFromTalkgroupID(Nullable<int> systemID, Nullable<int> fromTalkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patches_Result>("PatchesGetForSystemFromTalkgroupID", systemIDParameter, fromTalkgroupIDParameter);
        }
    
        public virtual ObjectResult<Patches_Result> PatchesGetForSystemTalkgroup(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patches_Result>("PatchesGetForSystemTalkgroup", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> PatchesGetForSystemTalkgroupCount(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("PatchesGetForSystemTalkgroupCount", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<PatchesSummary_Result> PatchesGetForSystemTalkgroupFiltersWithPaging(string systemID, Nullable<int> talkgroupID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PatchesSummary_Result>("PatchesGetForSystemTalkgroupFiltersWithPaging", systemIDParameter, talkgroupIDParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Patches_Result> PatchesGetForSystemToTalkgroupID(Nullable<int> systemID, Nullable<int> toTalkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patches_Result>("PatchesGetForSystemToTalkgroupID", systemIDParameter, toTalkgroupIDParameter);
        }
    
        public virtual ObjectResult<Patches_Result> PatchesGetForSystemTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Patches_Result>("PatchesGetForSystemTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> PatchesGetForSystemTowerCount(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("PatchesGetForSystemTowerCount", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<PatchesSummary_Result> PatchesGetForSystemTowerFiltersWithPaging(string systemID, Nullable<int> towerNumber, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PatchesSummary_Result>("PatchesGetForSystemTowerFiltersWithPaging", systemIDParameter, towerNumberParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<PatchesSummary_Result> PatchesGetSummary(Nullable<int> systemID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PatchesSummary_Result>("PatchesGetSummary", systemIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter);
        }
    
        public virtual ObjectResult<PatchesSummary_Result> PatchesGetSummaryForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PatchesSummary_Result>("PatchesGetSummaryForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<PatchesSummary_Result> PatchesGetSummaryForSystemFiltersWithPaging(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PatchesSummary_Result>("PatchesGetSummaryForSystemFiltersWithPaging", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProcessedFilesCheckFileExists(Nullable<int> systemID, string fileName, Nullable<System.DateTime> fileDate)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var fileDateParameter = fileDate.HasValue ?
                new ObjectParameter("fileDate", fileDate) :
                new ObjectParameter("fileDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProcessedFilesCheckFileExists", systemIDParameter, fileNameParameter, fileDateParameter);
        }
    
        public virtual int ProcessedFilesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessedFilesDelete", idParameter);
        }
    
        public virtual int ProcessedFilesDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessedFilesDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<ProcessedFiles> ProcessedFilesGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessedFiles>("ProcessedFilesGet", idParameter);
        }
    
        public virtual ObjectResult<ProcessedFiles> ProcessedFilesGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessedFiles>("ProcessedFilesGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProcessedFilesGetCountForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProcessedFilesGetCountForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<ProcessedFiles> ProcessedFilesGetForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessedFiles>("ProcessedFilesGetForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<ProcessedFiles> ProcessedFilesGetForSystem(Nullable<int> systemID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessedFiles>("ProcessedFilesGetForSystem", mergeOption, systemIDParameter);
        }
    
        public virtual ObjectResult<ProcessedFiles_Result> ProcessedFilesGetForSystemFiltersWithPaging(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessedFiles_Result>("ProcessedFilesGetForSystemFiltersWithPaging", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<ProcessedFiles_Result> ProcessedFilesGetForSystemWithPaging(string systemID, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessedFiles_Result>("ProcessedFilesGetForSystemWithPaging", systemIDParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<ProcessedFiles> ProcessedFilesGetForType(Nullable<int> systemID, string type, string fileName)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessedFiles>("ProcessedFilesGetForType", systemIDParameter, typeParameter, fileNameParameter);
        }
    
        public virtual ObjectResult<ProcessedFiles> ProcessedFilesGetForType(Nullable<int> systemID, string type, string fileName, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessedFiles>("ProcessedFilesGetForType", mergeOption, systemIDParameter, typeParameter, fileNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> ProcessedFilesInsert(Nullable<int> systemID, string fileName, string type, Nullable<System.DateTime> fileDate, Nullable<System.DateTime> dateProcessed, Nullable<int> rowCount)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var fileDateParameter = fileDate.HasValue ?
                new ObjectParameter("fileDate", fileDate) :
                new ObjectParameter("fileDate", typeof(System.DateTime));
    
            var dateProcessedParameter = dateProcessed.HasValue ?
                new ObjectParameter("dateProcessed", dateProcessed) :
                new ObjectParameter("dateProcessed", typeof(System.DateTime));
    
            var rowCountParameter = rowCount.HasValue ?
                new ObjectParameter("rowCount", rowCount) :
                new ObjectParameter("rowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("ProcessedFilesInsert", systemIDParameter, fileNameParameter, typeParameter, fileDateParameter, dateProcessedParameter, rowCountParameter);
        }
    
        public virtual int ProcessedFilesUpdate(Nullable<int> id, Nullable<int> systemID, string fileName, string type, Nullable<System.DateTime> fileDate, Nullable<System.DateTime> dateProcessed, Nullable<int> rowCount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var fileDateParameter = fileDate.HasValue ?
                new ObjectParameter("fileDate", fileDate) :
                new ObjectParameter("fileDate", typeof(System.DateTime));
    
            var dateProcessedParameter = dateProcessed.HasValue ?
                new ObjectParameter("dateProcessed", dateProcessed) :
                new ObjectParameter("dateProcessed", typeof(System.DateTime));
    
            var rowCountParameter = rowCount.HasValue ?
                new ObjectParameter("rowCount", rowCount) :
                new ObjectParameter("rowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessedFilesUpdate", idParameter, systemIDParameter, fileNameParameter, typeParameter, fileDateParameter, dateProcessedParameter, rowCountParameter);
        }
    
        public virtual int ProcessedSystemFilesGetForSytem(string systemID)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessedSystemFilesGetForSytem", systemIDParameter);
        }
    
        public virtual int RadioHistoryDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadioHistoryDelete", idParameter);
        }
    
        public virtual int RadioHistoryDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadioHistoryDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<RadioHistory> RadioHistoryGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioHistory>("RadioHistoryGet", idParameter);
        }
    
        public virtual ObjectResult<RadioHistory> RadioHistoryGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioHistory>("RadioHistoryGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<RadioHistory> RadioHistoryGetForRadio(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioHistory>("RadioHistoryGetForRadio", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<RadioHistory> RadioHistoryGetForRadio(Nullable<int> systemID, Nullable<int> radioID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioHistory>("RadioHistoryGetForRadio", mergeOption, systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RadioHistoryGetForRadioCount(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RadioHistoryGetForRadioCount", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<RadioHistory_Result> RadioHistoryGetForRadioFiltersWithPaging(string systemID, Nullable<int> radioID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> radioIDFrom, Nullable<int> radioIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var radioIDFromParameter = radioIDFrom.HasValue ?
                new ObjectParameter("radioIDFrom", radioIDFrom) :
                new ObjectParameter("radioIDFrom", typeof(int));
    
            var radioIDToParameter = radioIDTo.HasValue ?
                new ObjectParameter("radioIDTo", radioIDTo) :
                new ObjectParameter("radioIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioHistory_Result>("RadioHistoryGetForRadioFiltersWithPaging", systemIDParameter, radioIDParameter, searchTextParameter, dateFromParameter, dateToParameter, radioIDFromParameter, radioIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RadioHistoryGetForRadioSearchCount(Nullable<int> systemID, Nullable<int> radioID, string searchText)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RadioHistoryGetForRadioSearchCount", systemIDParameter, radioIDParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<RadioHistory> RadioHistoryGetForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioHistory>("RadioHistoryGetForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<RadioHistory> RadioHistoryGetForSystem(Nullable<int> systemID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioHistory>("RadioHistoryGetForSystem", mergeOption, systemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> RadioHistoryInsert(Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("RadioHistoryInsert", systemIDParameter, radioIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int RadioHistoryUpdate(Nullable<int> id, Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadioHistoryUpdate", idParameter, systemIDParameter, radioIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int RadiosDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadiosDelete", idParameter);
        }
    
        public virtual int RadiosDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadiosDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Radios> RadiosGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Radios>("RadiosGet", idParameter);
        }
    
        public virtual ObjectResult<Radios> RadiosGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Radios>("RadiosGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RadiosGetCountForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RadiosGetCountForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<RadioDetails_Result> RadiosGetDetail(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioDetails_Result>("RadiosGetDetail", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<RadioDetails_Result> RadiosGetDetailFilters(Nullable<int> systemID, Nullable<int> radioID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioDetails_Result>("RadiosGetDetailFilters", systemIDParameter, radioIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<RadioDetails_Result> RadiosGetDetailForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioDetails_Result>("RadiosGetDetailForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<RadioDetails_Result> RadiosGetDetailForSystemActiveFiltersWithPaging(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> radioIDFrom, Nullable<int> radioIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var radioIDFromParameter = radioIDFrom.HasValue ?
                new ObjectParameter("radioIDFrom", radioIDFrom) :
                new ObjectParameter("radioIDFrom", typeof(int));
    
            var radioIDToParameter = radioIDTo.HasValue ?
                new ObjectParameter("radioIDTo", radioIDTo) :
                new ObjectParameter("radioIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioDetails_Result>("RadiosGetDetailForSystemActiveFiltersWithPaging", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, radioIDFromParameter, radioIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<RadioDetails_Result> RadiosGetDetailForSystemActiveWithPaging(string systemID, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioDetails_Result>("RadiosGetDetailForSystemActiveWithPaging", systemIDParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<RadioDetails_Result> RadiosGetDetailForSystemFiltersWithPaging(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> radioIDFrom, Nullable<int> radioIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var radioIDFromParameter = radioIDFrom.HasValue ?
                new ObjectParameter("radioIDFrom", radioIDFrom) :
                new ObjectParameter("radioIDFrom", typeof(int));
    
            var radioIDToParameter = radioIDTo.HasValue ?
                new ObjectParameter("radioIDTo", radioIDTo) :
                new ObjectParameter("radioIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioDetails_Result>("RadiosGetDetailForSystemFiltersWithPaging", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, radioIDFromParameter, radioIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<RadioDetails_Result> RadiosGetDetailForSystemWithPaging(string systemID, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioDetails_Result>("RadiosGetDetailForSystemWithPaging", systemIDParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Radios> RadiosGetForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Radios>("RadiosGetForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Radios> RadiosGetForSystem(Nullable<int> systemID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Radios>("RadiosGetForSystem", mergeOption, systemIDParameter);
        }
    
        public virtual ObjectResult<Radios> RadiosGetForSystemRadio(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Radios>("RadiosGetForSystemRadio", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<Radios> RadiosGetForSystemRadio(Nullable<int> systemID, Nullable<int> radioID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Radios>("RadiosGetForSystemRadio", mergeOption, systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<RadiosNames_Result> RadiosGetSystemNames(string systemID, string searchText, Nullable<int> radioIDFrom, Nullable<int> radioIDTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var radioIDFromParameter = radioIDFrom.HasValue ?
                new ObjectParameter("radioIDFrom", radioIDFrom) :
                new ObjectParameter("radioIDFrom", typeof(int));
    
            var radioIDToParameter = radioIDTo.HasValue ?
                new ObjectParameter("radioIDTo", radioIDTo) :
                new ObjectParameter("radioIDTo", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadiosNames_Result>("RadiosGetSystemNames", systemIDParameter, searchTextParameter, radioIDFromParameter, radioIDToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> RadiosInsert(Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, string fgColor, string bgColor, Nullable<int> hitCount, Nullable<bool> phaseIISeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var phaseIISeenParameter = phaseIISeen.HasValue ?
                new ObjectParameter("phaseIISeen", phaseIISeen) :
                new ObjectParameter("phaseIISeen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("RadiosInsert", systemIDParameter, radioIDParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, fgColorParameter, bgColorParameter, hitCountParameter, phaseIISeenParameter);
        }
    
        public virtual int RadiosUpdate(Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, string fgColor, string bgColor, Nullable<int> hitCount, Nullable<bool> phaseIISeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var phaseIISeenParameter = phaseIISeen.HasValue ?
                new ObjectParameter("phaseIISeen", phaseIISeen) :
                new ObjectParameter("phaseIISeen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadiosUpdate", systemIDParameter, radioIDParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, fgColorParameter, bgColorParameter, hitCountParameter, phaseIISeenParameter);
        }
    
        public virtual int SystemsDelete(string systemID)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SystemsDelete", systemIDParameter);
        }
    
        public virtual ObjectResult<Systems> SystemsGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Systems>("SystemsGet", idParameter);
        }
    
        public virtual ObjectResult<Systems> SystemsGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Systems>("SystemsGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SystemsGetCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SystemsGetCount");
        }
    
        public virtual ObjectResult<Systems> SystemsGetForSystem(string systemID)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Systems>("SystemsGetForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Systems> SystemsGetForSystem(string systemID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Systems>("SystemsGetForSystem", mergeOption, systemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SystemsGetID(string systemID)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SystemsGetID", systemIDParameter);
        }
    
        public virtual ObjectResult<Systems_Result> SystemsGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Systems_Result>("SystemsGetList");
        }
    
        public virtual ObjectResult<Systems_Result> SystemsGetListFilters(string searchText, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Systems_Result>("SystemsGetListFilters", searchTextParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SystemsInsert(string systemID, Nullable<int> systemIDDecimal, string description, string wacn, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var systemIDDecimalParameter = systemIDDecimal.HasValue ?
                new ObjectParameter("systemIDDecimal", systemIDDecimal) :
                new ObjectParameter("systemIDDecimal", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var wacnParameter = wacn != null ?
                new ObjectParameter("wacn", wacn) :
                new ObjectParameter("wacn", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SystemsInsert", systemIDParameter, systemIDDecimalParameter, descriptionParameter, wacnParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int SystemsUpdate(string systemID, Nullable<int> systemIDDecimal, string description, string wacn, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var systemIDDecimalParameter = systemIDDecimal.HasValue ?
                new ObjectParameter("systemIDDecimal", systemIDDecimal) :
                new ObjectParameter("systemIDDecimal", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var wacnParameter = wacn != null ?
                new ObjectParameter("wacn", wacn) :
                new ObjectParameter("wacn", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SystemsUpdate", systemIDParameter, systemIDDecimalParameter, descriptionParameter, wacnParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TalkgroupHistoryDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupHistoryDelete", idParameter);
        }
    
        public virtual int TalkgroupHistoryDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupHistoryDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupHistory> TalkgroupHistoryGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupHistory>("TalkgroupHistoryGet", idParameter);
        }
    
        public virtual ObjectResult<TalkgroupHistory> TalkgroupHistoryGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupHistory>("TalkgroupHistoryGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<TalkgroupHistoryForSystem_Result> TalkgroupHistoryGetForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupHistoryForSystem_Result>("TalkgroupHistoryGetForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupHistory> TalkgroupHistoryGetForTalkgroup(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupHistory>("TalkgroupHistoryGetForTalkgroup", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupHistory> TalkgroupHistoryGetForTalkgroup(Nullable<int> systemID, Nullable<int> talkgroupID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupHistory>("TalkgroupHistoryGetForTalkgroup", mergeOption, systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TalkgroupHistoryGetForTalkgroupCount(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TalkgroupHistoryGetForTalkgroupCount", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupHistory_Result> TalkgroupHistoryGetForTalkgroupFiltersWithPaging(string systemID, Nullable<int> talkgroupID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupHistory_Result>("TalkgroupHistoryGetForTalkgroupFiltersWithPaging", systemIDParameter, talkgroupIDParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TalkgroupHistoryInsert(Nullable<int> systemID, Nullable<int> talkgroupID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TalkgroupHistoryInsert", systemIDParameter, talkgroupIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TalkgroupHistoryUpdate(Nullable<int> id, Nullable<int> systemID, Nullable<int> talkgroupID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupHistoryUpdate", idParameter, systemIDParameter, talkgroupIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TalkgroupRadiosDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosDelete", idParameter);
        }
    
        public virtual int TalkgroupRadiosDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios> TalkgroupRadiosGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios>("TalkgroupRadiosGet", idParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios> TalkgroupRadiosGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios>("TalkgroupRadiosGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios> TalkgroupRadiosGetForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios>("TalkgroupRadiosGetForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios> TalkgroupRadiosGetForSystem(Nullable<int> systemID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios>("TalkgroupRadiosGetForSystem", mergeOption, systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios> TalkgroupRadiosGetForSystemDateRange(Nullable<int> systemID, Nullable<System.DateTime> date)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios>("TalkgroupRadiosGetForSystemDateRange", systemIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios> TalkgroupRadiosGetForSystemDateRange(Nullable<int> systemID, Nullable<System.DateTime> date, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios>("TalkgroupRadiosGetForSystemDateRange", mergeOption, systemIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios_Result> TalkgroupRadiosGetRadiosForTalkgroup(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios_Result>("TalkgroupRadiosGetRadiosForTalkgroup", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual int TalkgroupRadiosGetRadiosForTalkgroupByDate(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosGetRadiosForTalkgroupByDate", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TalkgroupRadiosGetRadiosForTalkgroupCount(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TalkgroupRadiosGetRadiosForTalkgroupCount", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios_Result> TalkgroupRadiosGetRadiosForTalkgroupFiltersWithPaging(string systemID, Nullable<int> talkgroupID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> radioIDFrom, Nullable<int> radioIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var radioIDFromParameter = radioIDFrom.HasValue ?
                new ObjectParameter("radioIDFrom", radioIDFrom) :
                new ObjectParameter("radioIDFrom", typeof(int));
    
            var radioIDToParameter = radioIDTo.HasValue ?
                new ObjectParameter("radioIDTo", radioIDTo) :
                new ObjectParameter("radioIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios_Result>("TalkgroupRadiosGetRadiosForTalkgroupFiltersWithPaging", systemIDParameter, talkgroupIDParameter, searchTextParameter, dateFromParameter, dateToParameter, radioIDFromParameter, radioIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadiosWithDates_Result> TalkgroupRadiosGetRadiosForTalkgroupWithDates(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadiosWithDates_Result>("TalkgroupRadiosGetRadiosForTalkgroupWithDates", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual int TalkgroupRadiosGetRadiosForTalkgroupWithPaging(Nullable<int> systemID, Nullable<int> talkgroupID, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosGetRadiosForTalkgroupWithPaging", systemIDParameter, talkgroupIDParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios_Result> TalkgroupRadiosGetTalkgroupsForRadio(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios_Result>("TalkgroupRadiosGetTalkgroupsForRadio", systemIDParameter, radioIDParameter);
        }
    
        public virtual int TalkgroupRadiosGetTalkgroupsForRadioByDate(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosGetTalkgroupsForRadioByDate", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TalkgroupRadiosGetTalkgroupsForRadioCount(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TalkgroupRadiosGetTalkgroupsForRadioCount", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadios_Result> TalkgroupRadiosGetTalkgroupsForRadioFiltersWithPaging(string systemID, Nullable<int> radioID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadios_Result>("TalkgroupRadiosGetTalkgroupsForRadioFiltersWithPaging", systemIDParameter, radioIDParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TalkgroupRadiosInsert(Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TalkgroupRadiosInsert", systemIDParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TalkgroupRadiosUpdate(Nullable<int> id, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosUpdate", idParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TalkgroupsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupsDelete", idParameter);
        }
    
        public virtual int TalkgroupsDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupsDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Talkgroups> TalkgroupsGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Talkgroups>("TalkgroupsGet", idParameter);
        }
    
        public virtual ObjectResult<Talkgroups> TalkgroupsGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Talkgroups>("TalkgroupsGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TalkgroupsGetCountForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TalkgroupsGetCountForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupDetails_Result> TalkgroupsGetDetail(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupDetails_Result>("TalkgroupsGetDetail", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupDetails_Result> TalkgroupsGetDetailFilters(Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupDetails_Result>("TalkgroupsGetDetailFilters", systemIDParameter, talkgroupIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<TalkgroupDetails_Result> TalkgroupsGetDetailForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupDetails_Result>("TalkgroupsGetDetailForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupDetails_Result> TalkgroupsGetDetailForSystemActiveFiltersWithPaging(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupDetails_Result>("TalkgroupsGetDetailForSystemActiveFiltersWithPaging", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TalkgroupDetails_Result> TalkgroupsGetDetailForSystemFiltersWithPaging(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupDetails_Result>("TalkgroupsGetDetailForSystemFiltersWithPaging", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Talkgroups> TalkgroupsGetForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Talkgroups>("TalkgroupsGetForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Talkgroups> TalkgroupsGetForSystem(Nullable<int> systemID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Talkgroups>("TalkgroupsGetForSystem", mergeOption, systemIDParameter);
        }
    
        public virtual ObjectResult<Talkgroups> TalkgroupsGetForSystemTalkgroup(string systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Talkgroups>("TalkgroupsGetForSystemTalkgroup", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<Talkgroups> TalkgroupsGetForSystemTalkgroup(string systemID, Nullable<int> talkgroupID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Talkgroups>("TalkgroupsGetForSystemTalkgroup", mergeOption, systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TalkgroupsInsert(Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> priority, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> firstSeenProgram, Nullable<long> firstSeenProgramUnix, string fgColor, string bgColor, Nullable<bool> encryptionSeen, Nullable<bool> ignoreEmergencySignal, Nullable<int> hitCount, Nullable<int> hitCountProgram, Nullable<bool> phaseIISeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var firstSeenProgramParameter = firstSeenProgram.HasValue ?
                new ObjectParameter("firstSeenProgram", firstSeenProgram) :
                new ObjectParameter("firstSeenProgram", typeof(System.DateTime));
    
            var firstSeenProgramUnixParameter = firstSeenProgramUnix.HasValue ?
                new ObjectParameter("firstSeenProgramUnix", firstSeenProgramUnix) :
                new ObjectParameter("firstSeenProgramUnix", typeof(long));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var encryptionSeenParameter = encryptionSeen.HasValue ?
                new ObjectParameter("encryptionSeen", encryptionSeen) :
                new ObjectParameter("encryptionSeen", typeof(bool));
    
            var ignoreEmergencySignalParameter = ignoreEmergencySignal.HasValue ?
                new ObjectParameter("ignoreEmergencySignal", ignoreEmergencySignal) :
                new ObjectParameter("ignoreEmergencySignal", typeof(bool));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var hitCountProgramParameter = hitCountProgram.HasValue ?
                new ObjectParameter("hitCountProgram", hitCountProgram) :
                new ObjectParameter("hitCountProgram", typeof(int));
    
            var phaseIISeenParameter = phaseIISeen.HasValue ?
                new ObjectParameter("phaseIISeen", phaseIISeen) :
                new ObjectParameter("phaseIISeen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TalkgroupsInsert", systemIDParameter, talkgroupIDParameter, priorityParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, firstSeenProgramParameter, firstSeenProgramUnixParameter, fgColorParameter, bgColorParameter, encryptionSeenParameter, ignoreEmergencySignalParameter, hitCountParameter, hitCountProgramParameter, phaseIISeenParameter);
        }
    
        public virtual int TalkgroupsUpate(Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> priority, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> firstSeenProgram, Nullable<long> firstSeenProgramUnix, string fgColor, string bgColor, Nullable<bool> encryptionSeen, Nullable<bool> ignoreEmergencySignal, Nullable<int> hitCount, Nullable<int> hitCountProgram)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var firstSeenProgramParameter = firstSeenProgram.HasValue ?
                new ObjectParameter("firstSeenProgram", firstSeenProgram) :
                new ObjectParameter("firstSeenProgram", typeof(System.DateTime));
    
            var firstSeenProgramUnixParameter = firstSeenProgramUnix.HasValue ?
                new ObjectParameter("firstSeenProgramUnix", firstSeenProgramUnix) :
                new ObjectParameter("firstSeenProgramUnix", typeof(long));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var encryptionSeenParameter = encryptionSeen.HasValue ?
                new ObjectParameter("encryptionSeen", encryptionSeen) :
                new ObjectParameter("encryptionSeen", typeof(bool));
    
            var ignoreEmergencySignalParameter = ignoreEmergencySignal.HasValue ?
                new ObjectParameter("ignoreEmergencySignal", ignoreEmergencySignal) :
                new ObjectParameter("ignoreEmergencySignal", typeof(bool));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var hitCountProgramParameter = hitCountProgram.HasValue ?
                new ObjectParameter("hitCountProgram", hitCountProgram) :
                new ObjectParameter("hitCountProgram", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupsUpate", systemIDParameter, talkgroupIDParameter, priorityParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, firstSeenProgramParameter, firstSeenProgramUnixParameter, fgColorParameter, bgColorParameter, encryptionSeenParameter, ignoreEmergencySignalParameter, hitCountParameter, hitCountProgramParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempPatchesInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID, Nullable<System.DateTime> date, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen, Nullable<int> hitCount)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempPatchesInsert", sessionIDParameter, systemIDParameter, towerIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter, dateParameter, firstSeenParameter, lastSeenParameter, hitCountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempRadioHistoryInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempRadioHistoryInsert", sessionIDParameter, systemIDParameter, radioIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempRadiosInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, string fgColor, string bgColor, Nullable<int> hitCount)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempRadiosInsert", sessionIDParameter, systemIDParameter, radioIDParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, fgColorParameter, bgColorParameter, hitCountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempSystemsInsert(Nullable<System.Guid> sessionID, string systemID, Nullable<int> systemIDDecimal, string description, string wacn, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var systemIDDecimalParameter = systemIDDecimal.HasValue ?
                new ObjectParameter("systemIDDecimal", systemIDDecimal) :
                new ObjectParameter("systemIDDecimal", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var wacnParameter = wacn != null ?
                new ObjectParameter("wacn", wacn) :
                new ObjectParameter("wacn", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempSystemsInsert", sessionIDParameter, systemIDParameter, systemIDDecimalParameter, descriptionParameter, wacnParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTalkgroupHistoryInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> talkgroupID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTalkgroupHistoryInsert", sessionIDParameter, systemIDParameter, talkgroupIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTalkgroupRadiosInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTalkgroupRadiosInsert", sessionIDParameter, systemIDParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTalkgroupsInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> priority, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> firstSeenProgram, Nullable<long> firstSeenProgramUnix, string fgColor, string bgColor, Nullable<bool> encryptionSeen, Nullable<bool> ignoreEmergencySignal, Nullable<int> hitCount, Nullable<int> hitCountProgram)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var firstSeenProgramParameter = firstSeenProgram.HasValue ?
                new ObjectParameter("firstSeenProgram", firstSeenProgram) :
                new ObjectParameter("firstSeenProgram", typeof(System.DateTime));
    
            var firstSeenProgramUnixParameter = firstSeenProgramUnix.HasValue ?
                new ObjectParameter("firstSeenProgramUnix", firstSeenProgramUnix) :
                new ObjectParameter("firstSeenProgramUnix", typeof(long));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var encryptionSeenParameter = encryptionSeen.HasValue ?
                new ObjectParameter("encryptionSeen", encryptionSeen) :
                new ObjectParameter("encryptionSeen", typeof(bool));
    
            var ignoreEmergencySignalParameter = ignoreEmergencySignal.HasValue ?
                new ObjectParameter("ignoreEmergencySignal", ignoreEmergencySignal) :
                new ObjectParameter("ignoreEmergencySignal", typeof(bool));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var hitCountProgramParameter = hitCountProgram.HasValue ?
                new ObjectParameter("hitCountProgram", hitCountProgram) :
                new ObjectParameter("hitCountProgram", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTalkgroupsInsert", sessionIDParameter, systemIDParameter, talkgroupIDParameter, priorityParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, firstSeenProgramParameter, firstSeenProgramUnixParameter, fgColorParameter, bgColorParameter, encryptionSeenParameter, ignoreEmergencySignalParameter, hitCountParameter, hitCountProgramParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerFrequenciesInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerID, string channel, string usage, string frequency, string inputChannel, string inputFrequency, Nullable<int> inputExplicit, Nullable<int> hitCountProgram, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var usageParameter = usage != null ?
                new ObjectParameter("usage", usage) :
                new ObjectParameter("usage", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var inputChannelParameter = inputChannel != null ?
                new ObjectParameter("inputChannel", inputChannel) :
                new ObjectParameter("inputChannel", typeof(string));
    
            var inputFrequencyParameter = inputFrequency != null ?
                new ObjectParameter("inputFrequency", inputFrequency) :
                new ObjectParameter("inputFrequency", typeof(string));
    
            var inputExplicitParameter = inputExplicit.HasValue ?
                new ObjectParameter("inputExplicit", inputExplicit) :
                new ObjectParameter("inputExplicit", typeof(int));
    
            var hitCountProgramParameter = hitCountProgram.HasValue ?
                new ObjectParameter("hitCountProgram", hitCountProgram) :
                new ObjectParameter("hitCountProgram", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerFrequenciesInsert", sessionIDParameter, systemIDParameter, towerIDParameter, channelParameter, usageParameter, frequencyParameter, inputChannelParameter, inputFrequencyParameter, inputExplicitParameter, hitCountProgramParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerFrequencyUsageInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerID, string channel, string frequency, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> cwidCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var cwidCountParameter = cwidCount.HasValue ?
                new ObjectParameter("cwidCount", cwidCount) :
                new ObjectParameter("cwidCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerFrequencyUsageInsert", sessionIDParameter, systemIDParameter, towerIDParameter, channelParameter, frequencyParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, cwidCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerRadiosInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerRadiosInsert", sessionIDParameter, systemIDParameter, towerNumberParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowersInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerNumber, string towerNumberHex, string description, Nullable<int> hitCount, string wacn, string controlCapabilities, string flavor, string callSigns, Nullable<System.DateTime> timeStamp, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var towerNumberHexParameter = towerNumberHex != null ?
                new ObjectParameter("towerNumberHex", towerNumberHex) :
                new ObjectParameter("towerNumberHex", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var wacnParameter = wacn != null ?
                new ObjectParameter("wacn", wacn) :
                new ObjectParameter("wacn", typeof(string));
    
            var controlCapabilitiesParameter = controlCapabilities != null ?
                new ObjectParameter("controlCapabilities", controlCapabilities) :
                new ObjectParameter("controlCapabilities", typeof(string));
    
            var flavorParameter = flavor != null ?
                new ObjectParameter("flavor", flavor) :
                new ObjectParameter("flavor", typeof(string));
    
            var callSignsParameter = callSigns != null ?
                new ObjectParameter("callSigns", callSigns) :
                new ObjectParameter("callSigns", typeof(string));
    
            var timeStampParameter = timeStamp.HasValue ?
                new ObjectParameter("timeStamp", timeStamp) :
                new ObjectParameter("timeStamp", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowersInsert", sessionIDParameter, systemIDParameter, towerNumberParameter, towerNumberHexParameter, descriptionParameter, hitCountParameter, wacnParameter, controlCapabilitiesParameter, flavorParameter, callSignsParameter, timeStampParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerTalkgroupRadiosInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerID, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerTalkgroupRadiosInsert", sessionIDParameter, systemIDParameter, towerIDParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerTalkgroupsInsert(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> talkgroupID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerTalkgroupsInsert", sessionIDParameter, systemIDParameter, towerNumberParameter, talkgroupIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequenciesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequenciesDelete", idParameter);
        }
    
        public virtual int TowerFrequenciesDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequenciesDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies> TowerFrequenciesGetForFrequency(Nullable<int> systemID, Nullable<int> towerNumber, string frequency)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies>("TowerFrequenciesGetForFrequency", systemIDParameter, towerNumberParameter, frequencyParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies> TowerFrequenciesGetForFrequency(Nullable<int> systemID, Nullable<int> towerNumber, string frequency, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies>("TowerFrequenciesGetForFrequency", mergeOption, systemIDParameter, towerNumberParameter, frequencyParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies_Result> TowerFrequenciesGetFrequenciesForTowerAll(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies_Result>("TowerFrequenciesGetFrequenciesForTowerAll", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TowerFrequenciesGetFrequenciesForTowerAllCount(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TowerFrequenciesGetFrequenciesForTowerAllCount", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies_Result> TowerFrequenciesGetFrequenciesForTowerAllFiltersWithPaging(string systemID, Nullable<int> towerNumber, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies_Result>("TowerFrequenciesGetFrequenciesForTowerAllFiltersWithPaging", systemIDParameter, towerNumberParameter, searchTextParameter, dateFromParameter, dateToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TowerFrequenciesGetFrequenciesForTowerCount(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TowerFrequenciesGetFrequenciesForTowerCount", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies_Result> TowerFrequenciesGetFrequenciesForTowerFiltersWithPaging(string systemID, Nullable<int> towerNumber, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies_Result>("TowerFrequenciesGetFrequenciesForTowerFiltersWithPaging", systemIDParameter, towerNumberParameter, searchTextParameter, dateFromParameter, dateToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies_Result> TowerFrequenciesGetFrequenciesForTowerNotCurrent(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies_Result>("TowerFrequenciesGetFrequenciesForTowerNotCurrent", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TowerFrequenciesGetFrequenciesForTowerNotCurrentCount(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TowerFrequenciesGetFrequenciesForTowerNotCurrentCount", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies_Result> TowerFrequenciesGetFrequenciesForTowerNotCurrentFiltersWithPaging(string systemID, Nullable<int> towerNumber, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies_Result>("TowerFrequenciesGetFrequenciesForTowerNotCurrentFiltersWithPaging", systemIDParameter, towerNumberParameter, searchTextParameter, dateFromParameter, dateToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerFrequenciesInsert(Nullable<int> systemID, Nullable<int> towerID, string channel, string usage, string frequency, string inputChannel, string inputFrequency, Nullable<int> inputExplicit, Nullable<int> hitCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var usageParameter = usage != null ?
                new ObjectParameter("usage", usage) :
                new ObjectParameter("usage", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var inputChannelParameter = inputChannel != null ?
                new ObjectParameter("inputChannel", inputChannel) :
                new ObjectParameter("inputChannel", typeof(string));
    
            var inputFrequencyParameter = inputFrequency != null ?
                new ObjectParameter("inputFrequency", inputFrequency) :
                new ObjectParameter("inputFrequency", typeof(string));
    
            var inputExplicitParameter = inputExplicit.HasValue ?
                new ObjectParameter("inputExplicit", inputExplicit) :
                new ObjectParameter("inputExplicit", typeof(int));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerFrequenciesInsert", systemIDParameter, towerIDParameter, channelParameter, usageParameter, frequencyParameter, inputChannelParameter, inputFrequencyParameter, inputExplicitParameter, hitCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequenciesUpdate(Nullable<int> id, string channel, string usage, string inputChannel, string inputFrequency, Nullable<int> inputExplicit, Nullable<int> hitCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var usageParameter = usage != null ?
                new ObjectParameter("usage", usage) :
                new ObjectParameter("usage", typeof(string));
    
            var inputChannelParameter = inputChannel != null ?
                new ObjectParameter("inputChannel", inputChannel) :
                new ObjectParameter("inputChannel", typeof(string));
    
            var inputFrequencyParameter = inputFrequency != null ?
                new ObjectParameter("inputFrequency", inputFrequency) :
                new ObjectParameter("inputFrequency", typeof(string));
    
            var inputExplicitParameter = inputExplicit.HasValue ?
                new ObjectParameter("inputExplicit", inputExplicit) :
                new ObjectParameter("inputExplicit", typeof(int));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequenciesUpdate", idParameter, channelParameter, usageParameter, inputChannelParameter, inputFrequencyParameter, inputExplicitParameter, hitCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequencyUsageDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyUsageDelete", idParameter);
        }
    
        public virtual int TowerFrequencyUsageDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyUsageDeleteForSystem", systemIDParameter);
        }
    
        public virtual int TowerFrequencyUsageGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyUsageGet", idParameter);
        }
    
        public virtual int TowerFrequencyUsageGetForFrequency(Nullable<int> systemID, Nullable<int> towerNumber, string frequency)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyUsageGetForFrequency", systemIDParameter, towerNumberParameter, frequencyParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyUsage_Result> TowerFrequencyUsageGetFrequenciesForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyUsage_Result>("TowerFrequencyUsageGetFrequenciesForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyUsage_Result> TowerFrequencyUsageGetFrequenciesForTowerForDate(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyUsage_Result>("TowerFrequencyUsageGetFrequenciesForTowerForDate", systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerFrequencyUsageInsert(Nullable<int> systemID, Nullable<int> towerID, string channel, string frequency, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> cwidCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var cwidCountParameter = cwidCount.HasValue ?
                new ObjectParameter("cwidCount", cwidCount) :
                new ObjectParameter("cwidCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerFrequencyUsageInsert", systemIDParameter, towerIDParameter, channelParameter, frequencyParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, cwidCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequencyUsageUpdate(Nullable<int> id, Nullable<int> systemID, Nullable<int> towerID, string channel, string frequency, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> cwidCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var cwidCountParameter = cwidCount.HasValue ?
                new ObjectParameter("cwidCount", cwidCount) :
                new ObjectParameter("cwidCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyUsageUpdate", idParameter, systemIDParameter, towerIDParameter, channelParameter, frequencyParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, cwidCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerNeighborsDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerNeighborsDelete", idParameter);
        }
    
        public virtual int TowerNeighborsDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerNeighborsDeleteForSystem", systemIDParameter);
        }
    
        public virtual int TowerNeighborsDeleteForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerNeighborsDeleteForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerNeighbors> TowerNeighborsGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerNeighbors>("TowerNeighborsGet", idParameter);
        }
    
        public virtual ObjectResult<TowerNeighbors> TowerNeighborsGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerNeighbors>("TowerNeighborsGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<TowerNeighbors> TowerNeighborsGetForSystemTower(Nullable<int> systemID, Nullable<int> towerID, Nullable<int> neighborSystemID, Nullable<int> neighborTowerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var neighborSystemIDParameter = neighborSystemID.HasValue ?
                new ObjectParameter("neighborSystemID", neighborSystemID) :
                new ObjectParameter("neighborSystemID", typeof(int));
    
            var neighborTowerNumberParameter = neighborTowerNumber.HasValue ?
                new ObjectParameter("neighborTowerNumber", neighborTowerNumber) :
                new ObjectParameter("neighborTowerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerNeighbors>("TowerNeighborsGetForSystemTower", systemIDParameter, towerIDParameter, neighborSystemIDParameter, neighborTowerNumberParameter);
        }
    
        public virtual ObjectResult<TowerNeighbors> TowerNeighborsGetForSystemTower(Nullable<int> systemID, Nullable<int> towerID, Nullable<int> neighborSystemID, Nullable<int> neighborTowerNumber, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var neighborSystemIDParameter = neighborSystemID.HasValue ?
                new ObjectParameter("neighborSystemID", neighborSystemID) :
                new ObjectParameter("neighborSystemID", typeof(int));
    
            var neighborTowerNumberParameter = neighborTowerNumber.HasValue ?
                new ObjectParameter("neighborTowerNumber", neighborTowerNumber) :
                new ObjectParameter("neighborTowerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerNeighbors>("TowerNeighborsGetForSystemTower", mergeOption, systemIDParameter, towerIDParameter, neighborSystemIDParameter, neighborTowerNumberParameter);
        }
    
        public virtual ObjectResult<TowerNeighbors> TowerNeighborsGetForSystemTowerNumber(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> neighborSystemID, Nullable<int> neighborTowerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var neighborSystemIDParameter = neighborSystemID.HasValue ?
                new ObjectParameter("neighborSystemID", neighborSystemID) :
                new ObjectParameter("neighborSystemID", typeof(int));
    
            var neighborTowerNumberParameter = neighborTowerNumber.HasValue ?
                new ObjectParameter("neighborTowerNumber", neighborTowerNumber) :
                new ObjectParameter("neighborTowerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerNeighbors>("TowerNeighborsGetForSystemTowerNumber", systemIDParameter, towerNumberParameter, neighborSystemIDParameter, neighborTowerNumberParameter);
        }
    
        public virtual ObjectResult<TowerNeighbors> TowerNeighborsGetForSystemTowerNumber(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> neighborSystemID, Nullable<int> neighborTowerNumber, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var neighborSystemIDParameter = neighborSystemID.HasValue ?
                new ObjectParameter("neighborSystemID", neighborSystemID) :
                new ObjectParameter("neighborSystemID", typeof(int));
    
            var neighborTowerNumberParameter = neighborTowerNumber.HasValue ?
                new ObjectParameter("neighborTowerNumber", neighborTowerNumber) :
                new ObjectParameter("neighborTowerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerNeighbors>("TowerNeighborsGetForSystemTowerNumber", mergeOption, systemIDParameter, towerNumberParameter, neighborSystemIDParameter, neighborTowerNumberParameter);
        }
    
        public virtual ObjectResult<TowerNeighbors_Result> TowerNeighborsGetNeighborsForSystemTowerFiltersWithPaging(string systemID, Nullable<int> towerNumber, string searchText, Nullable<int> towerNumberFrom, Nullable<int> towerNumberTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var towerNumberFromParameter = towerNumberFrom.HasValue ?
                new ObjectParameter("towerNumberFrom", towerNumberFrom) :
                new ObjectParameter("towerNumberFrom", typeof(int));
    
            var towerNumberToParameter = towerNumberTo.HasValue ?
                new ObjectParameter("towerNumberTo", towerNumberTo) :
                new ObjectParameter("towerNumberTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerNeighbors_Result>("TowerNeighborsGetNeighborsForSystemTowerFiltersWithPaging", systemIDParameter, towerNumberParameter, searchTextParameter, towerNumberFromParameter, towerNumberToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TowerNeighbors_Result> TowerNeighborsGetNeighborsForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerNeighbors_Result>("TowerNeighborsGetNeighborsForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerNeighborsInsert(Nullable<int> systemID, Nullable<int> towerID, Nullable<int> neighborSystemID, Nullable<int> neighborTowerID, string neighborTowerNumberHex, string neighborChannel, string neighborFrequency, string neighborTowerName, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var neighborSystemIDParameter = neighborSystemID.HasValue ?
                new ObjectParameter("neighborSystemID", neighborSystemID) :
                new ObjectParameter("neighborSystemID", typeof(int));
    
            var neighborTowerIDParameter = neighborTowerID.HasValue ?
                new ObjectParameter("neighborTowerID", neighborTowerID) :
                new ObjectParameter("neighborTowerID", typeof(int));
    
            var neighborTowerNumberHexParameter = neighborTowerNumberHex != null ?
                new ObjectParameter("neighborTowerNumberHex", neighborTowerNumberHex) :
                new ObjectParameter("neighborTowerNumberHex", typeof(string));
    
            var neighborChannelParameter = neighborChannel != null ?
                new ObjectParameter("neighborChannel", neighborChannel) :
                new ObjectParameter("neighborChannel", typeof(string));
    
            var neighborFrequencyParameter = neighborFrequency != null ?
                new ObjectParameter("neighborFrequency", neighborFrequency) :
                new ObjectParameter("neighborFrequency", typeof(string));
    
            var neighborTowerNameParameter = neighborTowerName != null ?
                new ObjectParameter("neighborTowerName", neighborTowerName) :
                new ObjectParameter("neighborTowerName", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerNeighborsInsert", systemIDParameter, towerIDParameter, neighborSystemIDParameter, neighborTowerIDParameter, neighborTowerNumberHexParameter, neighborChannelParameter, neighborFrequencyParameter, neighborTowerNameParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerNeighborsUpdate(Nullable<int> id, string neighborTowerNumberHex, string neighborChannel, string neighborFrequency, string neighborTowerName, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var neighborTowerNumberHexParameter = neighborTowerNumberHex != null ?
                new ObjectParameter("neighborTowerNumberHex", neighborTowerNumberHex) :
                new ObjectParameter("neighborTowerNumberHex", typeof(string));
    
            var neighborChannelParameter = neighborChannel != null ?
                new ObjectParameter("neighborChannel", neighborChannel) :
                new ObjectParameter("neighborChannel", typeof(string));
    
            var neighborFrequencyParameter = neighborFrequency != null ?
                new ObjectParameter("neighborFrequency", neighborFrequency) :
                new ObjectParameter("neighborFrequency", typeof(string));
    
            var neighborTowerNameParameter = neighborTowerName != null ?
                new ObjectParameter("neighborTowerName", neighborTowerName) :
                new ObjectParameter("neighborTowerName", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerNeighborsUpdate", idParameter, neighborTowerNumberHexParameter, neighborChannelParameter, neighborFrequencyParameter, neighborTowerNameParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerRadiosDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerRadiosDelete", idParameter);
        }
    
        public virtual int TowerRadiosDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerRadiosDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerRadios> TowerRadiosGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios>("TowerRadiosGet", idParameter);
        }
    
        public virtual ObjectResult<TowerRadios> TowerRadiosGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios>("TowerRadiosGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> TowerRadiosGetDateListForTowerRadio(string systemID, Nullable<int> radioID, Nullable<int> towerNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("TowerRadiosGetDateListForTowerRadio", systemIDParameter, radioIDParameter, towerNumberParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<TowerRadios> TowerRadiosGetForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios>("TowerRadiosGetForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerRadios> TowerRadiosGetForTower(Nullable<int> systemID, Nullable<int> towerNumber, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios>("TowerRadiosGetForTower", mergeOption, systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerRadios> TowerRadiosGetForTowerDateRange(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios>("TowerRadiosGetForTowerDateRange", systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual ObjectResult<TowerRadios> TowerRadiosGetForTowerDateRange(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios>("TowerRadiosGetForTowerDateRange", mergeOption, systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual ObjectResult<TowerRadios_Result> TowerRadiosGetRadiosForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios_Result>("TowerRadiosGetRadiosForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerRadios> TowerRadiosGetRadiosForTowerByDate(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios>("TowerRadiosGetRadiosForTowerByDate", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerRadios> TowerRadiosGetRadiosForTowerByDate(Nullable<int> systemID, Nullable<int> towerNumber, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios>("TowerRadiosGetRadiosForTowerByDate", mergeOption, systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TowerRadiosGetRadiosForTowerCount(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TowerRadiosGetRadiosForTowerCount", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerRadios_Result> TowerRadiosGetRadiosForTowerFiltersWithPaging(string systemID, Nullable<int> towerNumber, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> radioIDFrom, Nullable<int> radioIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var radioIDFromParameter = radioIDFrom.HasValue ?
                new ObjectParameter("radioIDFrom", radioIDFrom) :
                new ObjectParameter("radioIDFrom", typeof(int));
    
            var radioIDToParameter = radioIDTo.HasValue ?
                new ObjectParameter("radioIDTo", radioIDTo) :
                new ObjectParameter("radioIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios_Result>("TowerRadiosGetRadiosForTowerFiltersWithPaging", systemIDParameter, towerNumberParameter, searchTextParameter, dateFromParameter, dateToParameter, radioIDFromParameter, radioIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual int TowerRadiosGetRadiosForTowerWithPaging(Nullable<int> systemID, Nullable<int> towerNumber, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerRadiosGetRadiosForTowerWithPaging", systemIDParameter, towerNumberParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TowerList_Result> TowerRadiosGetTowerListForRadio(string systemID, Nullable<int> radioID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerList_Result>("TowerRadiosGetTowerListForRadio", systemIDParameter, radioIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<TowerRadios_Result> TowerRadiosGetTowersForRadio(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios_Result>("TowerRadiosGetTowersForRadio", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TowerRadiosGetTowersForRadioCount(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TowerRadiosGetTowersForRadioCount", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<TowerRadios_Result> TowerRadiosGetTowersForRadioFiltersWithPaging(string systemID, Nullable<int> radioID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> towerNumberFrom, Nullable<int> towerNumberTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var towerNumberFromParameter = towerNumberFrom.HasValue ?
                new ObjectParameter("towerNumberFrom", towerNumberFrom) :
                new ObjectParameter("towerNumberFrom", typeof(int));
    
            var towerNumberToParameter = towerNumberTo.HasValue ?
                new ObjectParameter("towerNumberTo", towerNumberTo) :
                new ObjectParameter("towerNumberTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadios_Result>("TowerRadiosGetTowersForRadioFiltersWithPaging", systemIDParameter, radioIDParameter, searchTextParameter, dateFromParameter, dateToParameter, towerNumberFromParameter, towerNumberToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerRadiosInsert(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerRadiosInsert", systemIDParameter, towerNumberParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerRadiosUpdate(Nullable<int> id, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerRadiosUpdate", idParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowersDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowersDelete", idParameter);
        }
    
        public virtual int TowersDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowersDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Towers> TowersGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Towers>("TowersGet", idParameter);
        }
    
        public virtual ObjectResult<Towers> TowersGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Towers>("TowersGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TowersGetCountForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TowersGetCountForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Towers> TowersGetForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Towers>("TowersGetForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<Towers> TowersGetForSystem(Nullable<int> systemID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Towers>("TowersGetForSystem", mergeOption, systemIDParameter);
        }
    
        public virtual ObjectResult<Towers_Result> TowersGetForSystemActiveFiltersWithPaging(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> towerNumberFrom, Nullable<int> towerNumberTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var towerNumberFromParameter = towerNumberFrom.HasValue ?
                new ObjectParameter("towerNumberFrom", towerNumberFrom) :
                new ObjectParameter("towerNumberFrom", typeof(int));
    
            var towerNumberToParameter = towerNumberTo.HasValue ?
                new ObjectParameter("towerNumberTo", towerNumberTo) :
                new ObjectParameter("towerNumberTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Towers_Result>("TowersGetForSystemActiveFiltersWithPaging", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, towerNumberFromParameter, towerNumberToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Towers_Result> TowersGetForSystemActiveWithPaging(string systemID, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Towers_Result>("TowersGetForSystemActiveWithPaging", systemIDParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Towers_Result> TowersGetForSystemFiltersWithPaging(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> towerNumberFrom, Nullable<int> towerNumberTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var towerNumberFromParameter = towerNumberFrom.HasValue ?
                new ObjectParameter("towerNumberFrom", towerNumberFrom) :
                new ObjectParameter("towerNumberFrom", typeof(int));
    
            var towerNumberToParameter = towerNumberTo.HasValue ?
                new ObjectParameter("towerNumberTo", towerNumberTo) :
                new ObjectParameter("towerNumberTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Towers_Result>("TowersGetForSystemFiltersWithPaging", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, towerNumberFromParameter, towerNumberToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Towers> TowersGetForSystemTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Towers>("TowersGetForSystemTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<Towers> TowersGetForSystemTower(Nullable<int> systemID, Nullable<int> towerNumber, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Towers>("TowersGetForSystemTower", mergeOption, systemIDParameter, towerNumberParameter);
        }
    
        public virtual int TowersGetForSystemWithPaging(string systemID, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowersGetForSystemWithPaging", systemIDParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowersInsert(Nullable<int> systemID, Nullable<int> towerNumber, string towerNumberHex, string description, Nullable<int> hitCount, string wacn, string controlCapabilities, string flavor, string callSigns, Nullable<System.DateTime> timeStamp, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var towerNumberHexParameter = towerNumberHex != null ?
                new ObjectParameter("towerNumberHex", towerNumberHex) :
                new ObjectParameter("towerNumberHex", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var wacnParameter = wacn != null ?
                new ObjectParameter("wacn", wacn) :
                new ObjectParameter("wacn", typeof(string));
    
            var controlCapabilitiesParameter = controlCapabilities != null ?
                new ObjectParameter("controlCapabilities", controlCapabilities) :
                new ObjectParameter("controlCapabilities", typeof(string));
    
            var flavorParameter = flavor != null ?
                new ObjectParameter("flavor", flavor) :
                new ObjectParameter("flavor", typeof(string));
    
            var callSignsParameter = callSigns != null ?
                new ObjectParameter("callSigns", callSigns) :
                new ObjectParameter("callSigns", typeof(string));
    
            var timeStampParameter = timeStamp.HasValue ?
                new ObjectParameter("timeStamp", timeStamp) :
                new ObjectParameter("timeStamp", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowersInsert", systemIDParameter, towerNumberParameter, towerNumberHexParameter, descriptionParameter, hitCountParameter, wacnParameter, controlCapabilitiesParameter, flavorParameter, callSignsParameter, timeStampParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowersUpdate(Nullable<int> id, string towerNumberHex, string description, Nullable<int> hitCount, string wacn, string controlCapabilities, string flavor, string callSigns, Nullable<System.DateTime> timeStamp, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var towerNumberHexParameter = towerNumberHex != null ?
                new ObjectParameter("towerNumberHex", towerNumberHex) :
                new ObjectParameter("towerNumberHex", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var wacnParameter = wacn != null ?
                new ObjectParameter("wacn", wacn) :
                new ObjectParameter("wacn", typeof(string));
    
            var controlCapabilitiesParameter = controlCapabilities != null ?
                new ObjectParameter("controlCapabilities", controlCapabilities) :
                new ObjectParameter("controlCapabilities", typeof(string));
    
            var flavorParameter = flavor != null ?
                new ObjectParameter("flavor", flavor) :
                new ObjectParameter("flavor", typeof(string));
    
            var callSignsParameter = callSigns != null ?
                new ObjectParameter("callSigns", callSigns) :
                new ObjectParameter("callSigns", typeof(string));
    
            var timeStampParameter = timeStamp.HasValue ?
                new ObjectParameter("timeStamp", timeStamp) :
                new ObjectParameter("timeStamp", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowersUpdate", idParameter, towerNumberHexParameter, descriptionParameter, hitCountParameter, wacnParameter, controlCapabilitiesParameter, flavorParameter, callSignsParameter, timeStampParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerTablesDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTablesDelete", idParameter);
        }
    
        public virtual int TowerTablesDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTablesDeleteForSystem", systemIDParameter);
        }
    
        public virtual int TowerTablesDeleteForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTablesDeleteForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTables> TowerTablesGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTables>("TowerTablesGet", idParameter);
        }
    
        public virtual ObjectResult<TowerTables> TowerTablesGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTables>("TowerTablesGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<TowerTables> TowerTablesGetForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTables>("TowerTablesGetForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTables> TowerTablesGetForTower(Nullable<int> systemID, Nullable<int> towerNumber, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTables>("TowerTablesGetForTower", mergeOption, systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTables> TowerTablesGetForTowerTable(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> tableID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("tableID", tableID) :
                new ObjectParameter("tableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTables>("TowerTablesGetForTowerTable", systemIDParameter, towerNumberParameter, tableIDParameter);
        }
    
        public virtual ObjectResult<TowerTables> TowerTablesGetForTowerTable(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> tableID, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("tableID", tableID) :
                new ObjectParameter("tableID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTables>("TowerTablesGetForTowerTable", mergeOption, systemIDParameter, towerNumberParameter, tableIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerTablesInsert(Nullable<int> systemID, Nullable<int> towerID, Nullable<int> tableID, string baseFrequency, string spacing, string inputOffset, string assumedConfirmed, string bandwidth, Nullable<int> slots)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("tableID", tableID) :
                new ObjectParameter("tableID", typeof(int));
    
            var baseFrequencyParameter = baseFrequency != null ?
                new ObjectParameter("baseFrequency", baseFrequency) :
                new ObjectParameter("baseFrequency", typeof(string));
    
            var spacingParameter = spacing != null ?
                new ObjectParameter("spacing", spacing) :
                new ObjectParameter("spacing", typeof(string));
    
            var inputOffsetParameter = inputOffset != null ?
                new ObjectParameter("inputOffset", inputOffset) :
                new ObjectParameter("inputOffset", typeof(string));
    
            var assumedConfirmedParameter = assumedConfirmed != null ?
                new ObjectParameter("assumedConfirmed", assumedConfirmed) :
                new ObjectParameter("assumedConfirmed", typeof(string));
    
            var bandwidthParameter = bandwidth != null ?
                new ObjectParameter("bandwidth", bandwidth) :
                new ObjectParameter("bandwidth", typeof(string));
    
            var slotsParameter = slots.HasValue ?
                new ObjectParameter("slots", slots) :
                new ObjectParameter("slots", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerTablesInsert", systemIDParameter, towerIDParameter, tableIDParameter, baseFrequencyParameter, spacingParameter, inputOffsetParameter, assumedConfirmedParameter, bandwidthParameter, slotsParameter);
        }
    
        public virtual int TowerTablesUpdate(Nullable<int> id, string baseFrequency, string spacing, string inputOffset, string assumedConfirmed, string bandwidth, Nullable<int> slots)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var baseFrequencyParameter = baseFrequency != null ?
                new ObjectParameter("baseFrequency", baseFrequency) :
                new ObjectParameter("baseFrequency", typeof(string));
    
            var spacingParameter = spacing != null ?
                new ObjectParameter("spacing", spacing) :
                new ObjectParameter("spacing", typeof(string));
    
            var inputOffsetParameter = inputOffset != null ?
                new ObjectParameter("inputOffset", inputOffset) :
                new ObjectParameter("inputOffset", typeof(string));
    
            var assumedConfirmedParameter = assumedConfirmed != null ?
                new ObjectParameter("assumedConfirmed", assumedConfirmed) :
                new ObjectParameter("assumedConfirmed", typeof(string));
    
            var bandwidthParameter = bandwidth != null ?
                new ObjectParameter("bandwidth", bandwidth) :
                new ObjectParameter("bandwidth", typeof(string));
    
            var slotsParameter = slots.HasValue ?
                new ObjectParameter("slots", slots) :
                new ObjectParameter("slots", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTablesUpdate", idParameter, baseFrequencyParameter, spacingParameter, inputOffsetParameter, assumedConfirmedParameter, bandwidthParameter, slotsParameter);
        }
    
        public virtual int TowerTalkgroupRadiosDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupRadiosDelete", idParameter);
        }
    
        public virtual int TowerTalkgroupRadiosDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupRadiosDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadios> TowerTalkgroupRadiosGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadios>("TowerTalkgroupRadiosGet", idParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadios> TowerTalkgroupRadiosGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadios>("TowerTalkgroupRadiosGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadios> TowerTalkgroupRadiosGetForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadios>("TowerTalkgroupRadiosGetForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadios> TowerTalkgroupRadiosGetForTower(Nullable<int> systemID, Nullable<int> towerNumber, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadios>("TowerTalkgroupRadiosGetForTower", mergeOption, systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadios> TowerTalkgroupRadiosGetForTowerDateRange(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadios>("TowerTalkgroupRadiosGetForTowerDateRange", systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadios> TowerTalkgroupRadiosGetForTowerDateRange(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadios>("TowerTalkgroupRadiosGetForTowerDateRange", mergeOption, systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadiosWithDates_Result> TowerTalkgroupRadiosGetRadiosForTalkgroupWithDates(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadiosWithDates_Result>("TowerTalkgroupRadiosGetRadiosForTalkgroupWithDates", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadiosWithDates_Result> TowerTalkgroupRadiosGetTalkgroupsForRadioWithDates(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadiosWithDates_Result>("TowerTalkgroupRadiosGetTalkgroupsForRadioWithDates", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadios_Result> TowerTalkgroupRadiosGetTowersForTalkgroupRadio(Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadios_Result>("TowerTalkgroupRadiosGetTowersForTalkgroupRadio", systemIDParameter, talkgroupIDParameter, radioIDParameter);
        }
    
        public virtual int TowerTalkgroupRadiosInsert(Nullable<int> systemID, Nullable<int> towerID, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupRadiosInsert", systemIDParameter, towerIDParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerTalkgroupRadiosUpdate(Nullable<int> id, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupRadiosUpdate", idParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerTalkgroupsDelete(string systemID, Nullable<int> towerNumber, Nullable<int> talkgroupID, Nullable<System.DateTime> date)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupsDelete", systemIDParameter, towerNumberParameter, talkgroupIDParameter, dateParameter);
        }
    
        public virtual int TowerTalkgroupsDeleteForSystem(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupsDeleteForSystem", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroups> TowerTalkgroupsGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroups>("TowerTalkgroupsGet", idParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroups> TowerTalkgroupsGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroups>("TowerTalkgroupsGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> TowerTalkgroupsGetDateListForTowerTalkgroup(string systemID, Nullable<int> talkgroupID, Nullable<int> towerNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("TowerTalkgroupsGetDateListForTowerTalkgroup", systemIDParameter, talkgroupIDParameter, towerNumberParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroups> TowerTalkgroupsGetForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroups>("TowerTalkgroupsGetForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroups> TowerTalkgroupsGetForTower(Nullable<int> systemID, Nullable<int> towerNumber, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroups>("TowerTalkgroupsGetForTower", mergeOption, systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupsImport_Result> TowerTalkgroupsGetForTowerImport(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupsImport_Result>("TowerTalkgroupsGetForTowerImport", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupsImport_Result> TowerTalkgroupsGetForTowerImportDateRange(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupsImport_Result>("TowerTalkgroupsGetForTowerImportDateRange", systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroups_Result> TowerTalkgroupsGetTalkgroupsForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroups_Result>("TowerTalkgroupsGetTalkgroupsForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroups_Result> TowerTalkgroupsGetTalkgroupsForTowerByDate(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroups_Result>("TowerTalkgroupsGetTalkgroupsForTowerByDate", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TowerTalkgroupsGetTalkgroupsForTowerCount(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TowerTalkgroupsGetTalkgroupsForTowerCount", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroups_Result> TowerTalkgroupsGetTalkgroupsForTowerFiltersWithPaging(string systemID, Nullable<int> towerNumber, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroups_Result>("TowerTalkgroupsGetTalkgroupsForTowerFiltersWithPaging", systemIDParameter, towerNumberParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TowerList_Result> TowerTalkgroupsGetTowerListForTalkgroup(string systemID, Nullable<int> talkgroupID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerList_Result>("TowerTalkgroupsGetTowerListForTalkgroup", systemIDParameter, talkgroupIDParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroups_Result> TowerTalkgroupsGetTowersForTalkgroup(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroups_Result>("TowerTalkgroupsGetTowersForTalkgroup", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TowerTalkgroupsGetTowersForTalkgroupCount(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TowerTalkgroupsGetTowersForTalkgroupCount", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroups_Result> TowerTalkgroupsGetTowersForTalkgroupFiltersWithPaging(string systemID, Nullable<int> talkgroupID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> towerNumberFrom, Nullable<int> towerNumberTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var towerNumberFromParameter = towerNumberFrom.HasValue ?
                new ObjectParameter("towerNumberFrom", towerNumberFrom) :
                new ObjectParameter("towerNumberFrom", typeof(int));
    
            var towerNumberToParameter = towerNumberTo.HasValue ?
                new ObjectParameter("towerNumberTo", towerNumberTo) :
                new ObjectParameter("towerNumberTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroups_Result>("TowerTalkgroupsGetTowersForTalkgroupFiltersWithPaging", systemIDParameter, talkgroupIDParameter, searchTextParameter, dateFromParameter, dateToParameter, towerNumberFromParameter, towerNumberToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerTalkgroupsInsert(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> talkgroupID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerTalkgroupsInsert", systemIDParameter, towerNumberParameter, talkgroupIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerTalkgroupsUpdate(Nullable<int> id, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupsUpdate", idParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyRadios> TowerFrequencyRadiosGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyRadios>("TowerFrequencyRadiosGet", idParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyRadios> TowerFrequencyRadiosGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyRadios>("TowerFrequencyRadiosGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyTalkgroups> TowerFrequencyTalkgroupsGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyTalkgroups>("TowerFrequencyTalkgroupsGet", idParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyTalkgroups> TowerFrequencyTalkgroupsGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyTalkgroups>("TowerFrequencyTalkgroupsGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerFrequencyTalkgroupsInsert(Nullable<int> systemID, Nullable<int> towerID, string frequency, Nullable<int> talkgroupID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerFrequencyTalkgroupsInsert", systemIDParameter, towerIDParameter, frequencyParameter, talkgroupIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequencyTalkgroupsUpdate(Nullable<int> id, Nullable<int> systemID, Nullable<int> towerID, string frequency, Nullable<int> talkgroupID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyTalkgroupsUpdate", idParameter, systemIDParameter, towerIDParameter, frequencyParameter, talkgroupIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerFrequencyRadiosInsert(Nullable<int> systemID, Nullable<int> towerID, string frequency, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerFrequencyRadiosInsert", systemIDParameter, towerIDParameter, frequencyParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequencyRadiosUpdate(Nullable<int> id, Nullable<int> systemID, Nullable<int> towerID, string frequency, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyRadiosUpdate", idParameter, systemIDParameter, towerIDParameter, frequencyParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyRadios> TowerFrequencyRadiosGetForTowerDate(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyRadios>("TowerFrequencyRadiosGetForTowerDate", systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyRadios> TowerFrequencyRadiosGetForTowerDate(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyRadios>("TowerFrequencyRadiosGetForTowerDate", mergeOption, systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyTalkgroups> TowerFrequencyTalkgroupsGetForTowerDate(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyTalkgroups>("TowerFrequencyTalkgroupsGetForTowerDate", systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyTalkgroups> TowerFrequencyTalkgroupsGetForTowerDate(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<System.DateTime> date, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyTalkgroups>("TowerFrequencyTalkgroupsGetForTowerDate", mergeOption, systemIDParameter, towerNumberParameter, dateParameter);
        }
    
        public virtual int MergeTowerFrequencyRadios(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTowerFrequencyRadios", sessionIDParameter);
        }
    
        public virtual int MergeTowerFrequencyTalkgroups(Nullable<System.Guid> sessionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MergeTowerFrequencyTalkgroups", sessionIDParameter);
        }
    
        public virtual int TalkgroupsUpdate(Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> priority, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> firstSeenProgram, Nullable<long> firstSeenProgramUnix, string fgColor, string bgColor, Nullable<bool> encryptionSeen, Nullable<bool> ignoreEmergencySignal, Nullable<int> hitCount, Nullable<int> hitCountProgram, Nullable<bool> phaseIISeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var firstSeenProgramParameter = firstSeenProgram.HasValue ?
                new ObjectParameter("firstSeenProgram", firstSeenProgram) :
                new ObjectParameter("firstSeenProgram", typeof(System.DateTime));
    
            var firstSeenProgramUnixParameter = firstSeenProgramUnix.HasValue ?
                new ObjectParameter("firstSeenProgramUnix", firstSeenProgramUnix) :
                new ObjectParameter("firstSeenProgramUnix", typeof(long));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var encryptionSeenParameter = encryptionSeen.HasValue ?
                new ObjectParameter("encryptionSeen", encryptionSeen) :
                new ObjectParameter("encryptionSeen", typeof(bool));
    
            var ignoreEmergencySignalParameter = ignoreEmergencySignal.HasValue ?
                new ObjectParameter("ignoreEmergencySignal", ignoreEmergencySignal) :
                new ObjectParameter("ignoreEmergencySignal", typeof(bool));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var hitCountProgramParameter = hitCountProgram.HasValue ?
                new ObjectParameter("hitCountProgram", hitCountProgram) :
                new ObjectParameter("hitCountProgram", typeof(int));
    
            var phaseIISeenParameter = phaseIISeen.HasValue ?
                new ObjectParameter("phaseIISeen", phaseIISeen) :
                new ObjectParameter("phaseIISeen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupsUpdate", systemIDParameter, talkgroupIDParameter, priorityParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, firstSeenProgramParameter, firstSeenProgramUnixParameter, fgColorParameter, bgColorParameter, encryptionSeenParameter, ignoreEmergencySignalParameter, hitCountParameter, hitCountProgramParameter, phaseIISeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> PatchesInsert(Nullable<int> systemID, Nullable<int> towerID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID, Nullable<System.DateTime> date, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen, Nullable<int> hitCount)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("PatchesInsert", systemIDParameter, towerIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter, dateParameter, firstSeenParameter, lastSeenParameter, hitCountParameter);
        }
    
        public virtual int PatchesUpdate(Nullable<int> id, Nullable<int> systemID, Nullable<int> towerID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID, Nullable<System.DateTime> date, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen, Nullable<int> hitCount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PatchesUpdate", idParameter, systemIDParameter, towerIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter, dateParameter, firstSeenParameter, lastSeenParameter, hitCountParameter);
        }
    
        public virtual ObjectResult<TalkgroupDetailsWithTowers_Result> TalkgroupsGetDetailForSystemUnknownFiltersWithPaging(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupDetailsWithTowers_Result>("TalkgroupsGetDetailForSystemUnknownFiltersWithPaging", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int f_ReseedIDs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_ReseedIDs");
        }
    
        public virtual int DeleteAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAll");
        }
    
        public virtual int DeleteAllForSystem(string actualSystemID)
        {
            var actualSystemIDParameter = actualSystemID != null ?
                new ObjectParameter("actualSystemID", actualSystemID) :
                new ObjectParameter("actualSystemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAllForSystem", actualSystemIDParameter);
        }
    
        public virtual int DeleteTempTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTempTables");
        }
    
        public virtual ObjectResult<TowerFrequencyRadios_Result> TowerFrequencyRadiosGetRadiosForFrequenciesWithPaging(string systemID, Nullable<int> towerNumber, string frequency, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> radioIDFrom, Nullable<int> radioIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var radioIDFromParameter = radioIDFrom.HasValue ?
                new ObjectParameter("radioIDFrom", radioIDFrom) :
                new ObjectParameter("radioIDFrom", typeof(int));
    
            var radioIDToParameter = radioIDTo.HasValue ?
                new ObjectParameter("radioIDTo", radioIDTo) :
                new ObjectParameter("radioIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyRadios_Result>("TowerFrequencyRadiosGetRadiosForFrequenciesWithPaging", systemIDParameter, towerNumberParameter, frequencyParameter, searchTextParameter, dateFromParameter, dateToParameter, radioIDFromParameter, radioIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyTalkgroups_Result> TowerFrequencyTalkgroupsGetTalkgroupsForFrequenciesWithPaging(string systemID, Nullable<int> towerNumber, string frequency, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyTalkgroups_Result>("TowerFrequencyTalkgroupsGetTalkgroupsForFrequenciesWithPaging", systemIDParameter, towerNumberParameter, frequencyParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<RadioTowerTalkgroups_Result> TowerTalkgroupRadiosGetRadiosForTowerTalkgroupFiltersWithPaging(string systemID, Nullable<int> talkgroupID, Nullable<int> towerNumber, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> radioIDFrom, Nullable<int> radioIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var radioIDFromParameter = radioIDFrom.HasValue ?
                new ObjectParameter("radioIDFrom", radioIDFrom) :
                new ObjectParameter("radioIDFrom", typeof(int));
    
            var radioIDToParameter = radioIDTo.HasValue ?
                new ObjectParameter("radioIDTo", radioIDTo) :
                new ObjectParameter("radioIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioTowerTalkgroups_Result>("TowerTalkgroupRadiosGetRadiosForTowerTalkgroupFiltersWithPaging", systemIDParameter, talkgroupIDParameter, towerNumberParameter, searchTextParameter, dateFromParameter, dateToParameter, radioIDFromParameter, radioIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TalkgroupTowerRadios_Result> TowerTalkgroupRadiosGetTalkgroupsForTowerRadioFiltersWithPaging(string systemID, Nullable<int> radioID, Nullable<int> towerNumber, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> talkgroupIDFrom, Nullable<int> talkgroupIDTo, Nullable<System.DateTime> firstSeenFrom, Nullable<System.DateTime> firstSeenTo, Nullable<System.DateTime> lastSeenFrom, Nullable<System.DateTime> lastSeenTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var talkgroupIDFromParameter = talkgroupIDFrom.HasValue ?
                new ObjectParameter("talkgroupIDFrom", talkgroupIDFrom) :
                new ObjectParameter("talkgroupIDFrom", typeof(int));
    
            var talkgroupIDToParameter = talkgroupIDTo.HasValue ?
                new ObjectParameter("talkgroupIDTo", talkgroupIDTo) :
                new ObjectParameter("talkgroupIDTo", typeof(int));
    
            var firstSeenFromParameter = firstSeenFrom.HasValue ?
                new ObjectParameter("firstSeenFrom", firstSeenFrom) :
                new ObjectParameter("firstSeenFrom", typeof(System.DateTime));
    
            var firstSeenToParameter = firstSeenTo.HasValue ?
                new ObjectParameter("firstSeenTo", firstSeenTo) :
                new ObjectParameter("firstSeenTo", typeof(System.DateTime));
    
            var lastSeenFromParameter = lastSeenFrom.HasValue ?
                new ObjectParameter("lastSeenFrom", lastSeenFrom) :
                new ObjectParameter("lastSeenFrom", typeof(System.DateTime));
    
            var lastSeenToParameter = lastSeenTo.HasValue ?
                new ObjectParameter("lastSeenTo", lastSeenTo) :
                new ObjectParameter("lastSeenTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupTowerRadios_Result>("TowerTalkgroupRadiosGetTalkgroupsForTowerRadioFiltersWithPaging", systemIDParameter, radioIDParameter, towerNumberParameter, searchTextParameter, dateFromParameter, dateToParameter, talkgroupIDFromParameter, talkgroupIDToParameter, firstSeenFromParameter, firstSeenToParameter, lastSeenFromParameter, lastSeenToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TowerFrequencySummary_Result> TowerFrequencyGetSummaryForFrequency(string systemID, Nullable<int> towerNumber, string frequency)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencySummary_Result>("TowerFrequencyGetSummaryForFrequency", systemIDParameter, towerNumberParameter, frequencyParameter);
        }
    
        public virtual ObjectResult<DatabaseStats_Result> f_DatabaseGetStats()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DatabaseStats_Result>("f_DatabaseGetStats");
        }
    
        public virtual int f_FindBadTalkgroups(string systemID)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_FindBadTalkgroups", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies_Result> TowerFrequenciesGetFrequenciesForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies_Result>("TowerFrequenciesGetFrequenciesForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies> TowerFrequenciesGetForTower(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies>("TowerFrequenciesGetForTower", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies> TowerFrequenciesGetForTower(Nullable<int> systemID, Nullable<int> towerNumber, MergeOption mergeOption)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies>("TowerFrequenciesGetForTower", mergeOption, systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies> TowerFrequenciesGet(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies>("TowerFrequenciesGet", idParameter);
        }
    
        public virtual ObjectResult<TowerFrequencies> TowerFrequenciesGet(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencies>("TowerFrequenciesGet", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> PatchesGetForSystemTowerCount1(Nullable<int> systemID, Nullable<int> towerNumber)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("PatchesGetForSystemTowerCount1", systemIDParameter, towerNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> PatchesInsert1(Nullable<int> systemID, Nullable<int> towerID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID, Nullable<System.DateTime> date, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen, Nullable<int> hitCount)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("PatchesInsert1", systemIDParameter, towerIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter, dateParameter, firstSeenParameter, lastSeenParameter, hitCountParameter);
        }
    
        public virtual int PatchesUpdate1(Nullable<int> id, Nullable<int> systemID, Nullable<int> towerID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID, Nullable<System.DateTime> date, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen, Nullable<int> hitCount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PatchesUpdate1", idParameter, systemIDParameter, towerIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter, dateParameter, firstSeenParameter, lastSeenParameter, hitCountParameter);
        }
    
        public virtual int ProcessedFilesDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessedFilesDelete1", idParameter);
        }
    
        public virtual int ProcessedFilesDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessedFilesDeleteForSystem1", systemIDParameter);
        }
    
        public virtual int ProcessedFilesGetForSystemFiltersWithPaging1(string systemID, string searchText, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessedFilesGetForSystemFiltersWithPaging1", systemIDParameter, searchTextParameter, dateFromParameter, dateToParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual int RadioHistoryDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadioHistoryDelete1", idParameter);
        }
    
        public virtual int RadioHistoryDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadioHistoryDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<RadioHistoryGet1_Result> RadioHistoryGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadioHistoryGet1_Result>("RadioHistoryGet1", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RadioHistoryGetForRadioSearchCount1(Nullable<int> systemID, Nullable<int> radioID, string searchText)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RadioHistoryGetForRadioSearchCount1", systemIDParameter, radioIDParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> RadioHistoryInsert1(Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("RadioHistoryInsert1", systemIDParameter, radioIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int RadioHistoryUpdate1(Nullable<int> id, Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadioHistoryUpdate1", idParameter, systemIDParameter, radioIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int RadiosDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadiosDelete1", idParameter);
        }
    
        public virtual int RadiosDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadiosDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<RadiosGet1_Result> RadiosGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadiosGet1_Result>("RadiosGet1", idParameter);
        }
    
        public virtual ObjectResult<RadiosGetForSystemRadio1_Result> RadiosGetForSystemRadio1(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RadiosGetForSystemRadio1_Result>("RadiosGetForSystemRadio1", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> RadiosInsert1(Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, string fgColor, string bgColor, Nullable<int> hitCount, Nullable<bool> phaseIISeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var phaseIISeenParameter = phaseIISeen.HasValue ?
                new ObjectParameter("phaseIISeen", phaseIISeen) :
                new ObjectParameter("phaseIISeen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("RadiosInsert1", systemIDParameter, radioIDParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, fgColorParameter, bgColorParameter, hitCountParameter, phaseIISeenParameter);
        }
    
        public virtual int RadiosUpdate1(Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, string fgColor, string bgColor, Nullable<int> hitCount, Nullable<bool> phaseIISeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var phaseIISeenParameter = phaseIISeen.HasValue ?
                new ObjectParameter("phaseIISeen", phaseIISeen) :
                new ObjectParameter("phaseIISeen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RadiosUpdate1", systemIDParameter, radioIDParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, fgColorParameter, bgColorParameter, hitCountParameter, phaseIISeenParameter);
        }
    
        public virtual int SystemsDelete1(string systemID)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SystemsDelete1", systemIDParameter);
        }
    
        public virtual int TalkgroupHistoryDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupHistoryDelete1", idParameter);
        }
    
        public virtual int TalkgroupHistoryDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupHistoryDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupHistoryGet1_Result> TalkgroupHistoryGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupHistoryGet1_Result>("TalkgroupHistoryGet1", idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TalkgroupHistoryInsert1(Nullable<int> systemID, Nullable<int> talkgroupID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TalkgroupHistoryInsert1", systemIDParameter, talkgroupIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TalkgroupHistoryUpdate1(Nullable<int> id, Nullable<int> systemID, Nullable<int> talkgroupID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupHistoryUpdate1", idParameter, systemIDParameter, talkgroupIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TalkgroupRadiosDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosDelete1", idParameter);
        }
    
        public virtual int TalkgroupRadiosDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadiosGet1_Result> TalkgroupRadiosGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadiosGet1_Result>("TalkgroupRadiosGet1", idParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadiosGetRadiosForTalkgroupByDate1_Result> TalkgroupRadiosGetRadiosForTalkgroupByDate1(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadiosGetRadiosForTalkgroupByDate1_Result>("TalkgroupRadiosGetRadiosForTalkgroupByDate1", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual int TalkgroupRadiosGetRadiosForTalkgroupWithPaging1(Nullable<int> systemID, Nullable<int> talkgroupID, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosGetRadiosForTalkgroupWithPaging1", systemIDParameter, talkgroupIDParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<TalkgroupRadiosGetTalkgroupsForRadioByDate1_Result> TalkgroupRadiosGetTalkgroupsForRadioByDate1(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupRadiosGetTalkgroupsForRadioByDate1_Result>("TalkgroupRadiosGetTalkgroupsForRadioByDate1", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TalkgroupRadiosInsert1(Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TalkgroupRadiosInsert1", systemIDParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TalkgroupRadiosUpdate1(Nullable<int> id, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupRadiosUpdate1", idParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TalkgroupsDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupsDelete1", idParameter);
        }
    
        public virtual int TalkgroupsDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupsDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TalkgroupsGet1_Result> TalkgroupsGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupsGet1_Result>("TalkgroupsGet1", idParameter);
        }
    
        public virtual ObjectResult<TalkgroupsGetForSystemTalkgroup1_Result> TalkgroupsGetForSystemTalkgroup1(string systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TalkgroupsGetForSystemTalkgroup1_Result>("TalkgroupsGetForSystemTalkgroup1", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TalkgroupsInsert1(Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> priority, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> firstSeenProgram, Nullable<long> firstSeenProgramUnix, string fgColor, string bgColor, Nullable<bool> encryptionSeen, Nullable<bool> ignoreEmergencySignal, Nullable<int> hitCount, Nullable<int> hitCountProgram, Nullable<bool> phaseIISeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var firstSeenProgramParameter = firstSeenProgram.HasValue ?
                new ObjectParameter("firstSeenProgram", firstSeenProgram) :
                new ObjectParameter("firstSeenProgram", typeof(System.DateTime));
    
            var firstSeenProgramUnixParameter = firstSeenProgramUnix.HasValue ?
                new ObjectParameter("firstSeenProgramUnix", firstSeenProgramUnix) :
                new ObjectParameter("firstSeenProgramUnix", typeof(long));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var encryptionSeenParameter = encryptionSeen.HasValue ?
                new ObjectParameter("encryptionSeen", encryptionSeen) :
                new ObjectParameter("encryptionSeen", typeof(bool));
    
            var ignoreEmergencySignalParameter = ignoreEmergencySignal.HasValue ?
                new ObjectParameter("ignoreEmergencySignal", ignoreEmergencySignal) :
                new ObjectParameter("ignoreEmergencySignal", typeof(bool));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var hitCountProgramParameter = hitCountProgram.HasValue ?
                new ObjectParameter("hitCountProgram", hitCountProgram) :
                new ObjectParameter("hitCountProgram", typeof(int));
    
            var phaseIISeenParameter = phaseIISeen.HasValue ?
                new ObjectParameter("phaseIISeen", phaseIISeen) :
                new ObjectParameter("phaseIISeen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TalkgroupsInsert1", systemIDParameter, talkgroupIDParameter, priorityParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, firstSeenProgramParameter, firstSeenProgramUnixParameter, fgColorParameter, bgColorParameter, encryptionSeenParameter, ignoreEmergencySignalParameter, hitCountParameter, hitCountProgramParameter, phaseIISeenParameter);
        }
    
        public virtual int TalkgroupsUpdate1(Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> priority, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> firstSeenProgram, Nullable<long> firstSeenProgramUnix, string fgColor, string bgColor, Nullable<bool> encryptionSeen, Nullable<bool> ignoreEmergencySignal, Nullable<int> hitCount, Nullable<int> hitCountProgram, Nullable<bool> phaseIISeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var firstSeenProgramParameter = firstSeenProgram.HasValue ?
                new ObjectParameter("firstSeenProgram", firstSeenProgram) :
                new ObjectParameter("firstSeenProgram", typeof(System.DateTime));
    
            var firstSeenProgramUnixParameter = firstSeenProgramUnix.HasValue ?
                new ObjectParameter("firstSeenProgramUnix", firstSeenProgramUnix) :
                new ObjectParameter("firstSeenProgramUnix", typeof(long));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var encryptionSeenParameter = encryptionSeen.HasValue ?
                new ObjectParameter("encryptionSeen", encryptionSeen) :
                new ObjectParameter("encryptionSeen", typeof(bool));
    
            var ignoreEmergencySignalParameter = ignoreEmergencySignal.HasValue ?
                new ObjectParameter("ignoreEmergencySignal", ignoreEmergencySignal) :
                new ObjectParameter("ignoreEmergencySignal", typeof(bool));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var hitCountProgramParameter = hitCountProgram.HasValue ?
                new ObjectParameter("hitCountProgram", hitCountProgram) :
                new ObjectParameter("hitCountProgram", typeof(int));
    
            var phaseIISeenParameter = phaseIISeen.HasValue ?
                new ObjectParameter("phaseIISeen", phaseIISeen) :
                new ObjectParameter("phaseIISeen", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TalkgroupsUpdate1", systemIDParameter, talkgroupIDParameter, priorityParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, firstSeenProgramParameter, firstSeenProgramUnixParameter, fgColorParameter, bgColorParameter, encryptionSeenParameter, ignoreEmergencySignalParameter, hitCountParameter, hitCountProgramParameter, phaseIISeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempPatchesInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerID, Nullable<int> fromTalkgroupID, Nullable<int> toTalkgroupID, Nullable<System.DateTime> date, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen, Nullable<int> hitCount)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var fromTalkgroupIDParameter = fromTalkgroupID.HasValue ?
                new ObjectParameter("fromTalkgroupID", fromTalkgroupID) :
                new ObjectParameter("fromTalkgroupID", typeof(int));
    
            var toTalkgroupIDParameter = toTalkgroupID.HasValue ?
                new ObjectParameter("toTalkgroupID", toTalkgroupID) :
                new ObjectParameter("toTalkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempPatchesInsert1", sessionIDParameter, systemIDParameter, towerIDParameter, fromTalkgroupIDParameter, toTalkgroupIDParameter, dateParameter, firstSeenParameter, lastSeenParameter, hitCountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempRadioHistoryInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempRadioHistoryInsert1", sessionIDParameter, systemIDParameter, radioIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempRadiosInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> radioID, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, string fgColor, string bgColor, Nullable<int> hitCount)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempRadiosInsert1", sessionIDParameter, systemIDParameter, radioIDParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, fgColorParameter, bgColorParameter, hitCountParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempSystemsInsert1(Nullable<System.Guid> sessionID, string systemID, Nullable<int> systemIDDecimal, string description, string wacn, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var systemIDDecimalParameter = systemIDDecimal.HasValue ?
                new ObjectParameter("systemIDDecimal", systemIDDecimal) :
                new ObjectParameter("systemIDDecimal", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var wacnParameter = wacn != null ?
                new ObjectParameter("wacn", wacn) :
                new ObjectParameter("wacn", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempSystemsInsert1", sessionIDParameter, systemIDParameter, systemIDDecimalParameter, descriptionParameter, wacnParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTalkgroupHistoryInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> talkgroupID, string description, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTalkgroupHistoryInsert1", sessionIDParameter, systemIDParameter, talkgroupIDParameter, descriptionParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTalkgroupRadiosInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTalkgroupRadiosInsert1", sessionIDParameter, systemIDParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTalkgroupsInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> talkgroupID, Nullable<int> priority, string description, Nullable<System.DateTime> lastSeen, Nullable<System.DateTime> lastSeenProgram, Nullable<long> lastSeenProgramUnix, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> firstSeenProgram, Nullable<long> firstSeenProgramUnix, string fgColor, string bgColor, Nullable<bool> encryptionSeen, Nullable<bool> ignoreEmergencySignal, Nullable<int> hitCount, Nullable<int> hitCountProgram)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            var lastSeenProgramParameter = lastSeenProgram.HasValue ?
                new ObjectParameter("lastSeenProgram", lastSeenProgram) :
                new ObjectParameter("lastSeenProgram", typeof(System.DateTime));
    
            var lastSeenProgramUnixParameter = lastSeenProgramUnix.HasValue ?
                new ObjectParameter("lastSeenProgramUnix", lastSeenProgramUnix) :
                new ObjectParameter("lastSeenProgramUnix", typeof(long));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var firstSeenProgramParameter = firstSeenProgram.HasValue ?
                new ObjectParameter("firstSeenProgram", firstSeenProgram) :
                new ObjectParameter("firstSeenProgram", typeof(System.DateTime));
    
            var firstSeenProgramUnixParameter = firstSeenProgramUnix.HasValue ?
                new ObjectParameter("firstSeenProgramUnix", firstSeenProgramUnix) :
                new ObjectParameter("firstSeenProgramUnix", typeof(long));
    
            var fgColorParameter = fgColor != null ?
                new ObjectParameter("fgColor", fgColor) :
                new ObjectParameter("fgColor", typeof(string));
    
            var bgColorParameter = bgColor != null ?
                new ObjectParameter("bgColor", bgColor) :
                new ObjectParameter("bgColor", typeof(string));
    
            var encryptionSeenParameter = encryptionSeen.HasValue ?
                new ObjectParameter("encryptionSeen", encryptionSeen) :
                new ObjectParameter("encryptionSeen", typeof(bool));
    
            var ignoreEmergencySignalParameter = ignoreEmergencySignal.HasValue ?
                new ObjectParameter("ignoreEmergencySignal", ignoreEmergencySignal) :
                new ObjectParameter("ignoreEmergencySignal", typeof(bool));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var hitCountProgramParameter = hitCountProgram.HasValue ?
                new ObjectParameter("hitCountProgram", hitCountProgram) :
                new ObjectParameter("hitCountProgram", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTalkgroupsInsert1", sessionIDParameter, systemIDParameter, talkgroupIDParameter, priorityParameter, descriptionParameter, lastSeenParameter, lastSeenProgramParameter, lastSeenProgramUnixParameter, firstSeenParameter, firstSeenProgramParameter, firstSeenProgramUnixParameter, fgColorParameter, bgColorParameter, encryptionSeenParameter, ignoreEmergencySignalParameter, hitCountParameter, hitCountProgramParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerFrequenciesInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerID, string channel, string usage, string frequency, string inputChannel, string inputFrequency, Nullable<int> inputExplicit, Nullable<int> hitCountProgram, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var usageParameter = usage != null ?
                new ObjectParameter("usage", usage) :
                new ObjectParameter("usage", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var inputChannelParameter = inputChannel != null ?
                new ObjectParameter("inputChannel", inputChannel) :
                new ObjectParameter("inputChannel", typeof(string));
    
            var inputFrequencyParameter = inputFrequency != null ?
                new ObjectParameter("inputFrequency", inputFrequency) :
                new ObjectParameter("inputFrequency", typeof(string));
    
            var inputExplicitParameter = inputExplicit.HasValue ?
                new ObjectParameter("inputExplicit", inputExplicit) :
                new ObjectParameter("inputExplicit", typeof(int));
    
            var hitCountProgramParameter = hitCountProgram.HasValue ?
                new ObjectParameter("hitCountProgram", hitCountProgram) :
                new ObjectParameter("hitCountProgram", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerFrequenciesInsert1", sessionIDParameter, systemIDParameter, towerIDParameter, channelParameter, usageParameter, frequencyParameter, inputChannelParameter, inputFrequencyParameter, inputExplicitParameter, hitCountProgramParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerFrequencyUsageInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerID, string channel, string frequency, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> cwidCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var cwidCountParameter = cwidCount.HasValue ?
                new ObjectParameter("cwidCount", cwidCount) :
                new ObjectParameter("cwidCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerFrequencyUsageInsert1", sessionIDParameter, systemIDParameter, towerIDParameter, channelParameter, frequencyParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, cwidCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerRadiosInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerRadiosInsert1", sessionIDParameter, systemIDParameter, towerNumberParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowersInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerNumber, string towerNumberHex, string description, Nullable<int> hitCount, string wacn, string controlCapabilities, string flavor, string callSigns, Nullable<System.DateTime> timeStamp, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var towerNumberHexParameter = towerNumberHex != null ?
                new ObjectParameter("towerNumberHex", towerNumberHex) :
                new ObjectParameter("towerNumberHex", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var hitCountParameter = hitCount.HasValue ?
                new ObjectParameter("hitCount", hitCount) :
                new ObjectParameter("hitCount", typeof(int));
    
            var wacnParameter = wacn != null ?
                new ObjectParameter("wacn", wacn) :
                new ObjectParameter("wacn", typeof(string));
    
            var controlCapabilitiesParameter = controlCapabilities != null ?
                new ObjectParameter("controlCapabilities", controlCapabilities) :
                new ObjectParameter("controlCapabilities", typeof(string));
    
            var flavorParameter = flavor != null ?
                new ObjectParameter("flavor", flavor) :
                new ObjectParameter("flavor", typeof(string));
    
            var callSignsParameter = callSigns != null ?
                new ObjectParameter("callSigns", callSigns) :
                new ObjectParameter("callSigns", typeof(string));
    
            var timeStampParameter = timeStamp.HasValue ?
                new ObjectParameter("timeStamp", timeStamp) :
                new ObjectParameter("timeStamp", typeof(System.DateTime));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowersInsert1", sessionIDParameter, systemIDParameter, towerNumberParameter, towerNumberHexParameter, descriptionParameter, hitCountParameter, wacnParameter, controlCapabilitiesParameter, flavorParameter, callSignsParameter, timeStampParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerTalkgroupRadiosInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerID, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerTalkgroupRadiosInsert1", sessionIDParameter, systemIDParameter, towerIDParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TempTowerTalkgroupsInsert1(Nullable<System.Guid> sessionID, Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> talkgroupID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TempTowerTalkgroupsInsert1", sessionIDParameter, systemIDParameter, towerNumberParameter, talkgroupIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequenciesDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequenciesDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyRadiosGet1_Result> TowerFrequencyRadiosGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyRadiosGet1_Result>("TowerFrequencyRadiosGet1", idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerFrequencyRadiosInsert1(Nullable<int> systemID, Nullable<int> towerID, string frequency, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerFrequencyRadiosInsert1", systemIDParameter, towerIDParameter, frequencyParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequencyRadiosUpdate1(Nullable<int> id, Nullable<int> systemID, Nullable<int> towerID, string frequency, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyRadiosUpdate1", idParameter, systemIDParameter, towerIDParameter, frequencyParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyTalkgroupsGet1_Result> TowerFrequencyTalkgroupsGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyTalkgroupsGet1_Result>("TowerFrequencyTalkgroupsGet1", idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerFrequencyTalkgroupsInsert1(Nullable<int> systemID, Nullable<int> towerID, string frequency, Nullable<int> talkgroupID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerFrequencyTalkgroupsInsert1", systemIDParameter, towerIDParameter, frequencyParameter, talkgroupIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequencyTalkgroupsUpdate1(Nullable<int> id, Nullable<int> systemID, Nullable<int> towerID, string frequency, Nullable<int> talkgroupID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyTalkgroupsUpdate1", idParameter, systemIDParameter, towerIDParameter, frequencyParameter, talkgroupIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequencyUsageDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyUsageDelete1", idParameter);
        }
    
        public virtual int TowerFrequencyUsageDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyUsageDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyUsageGet1_Result> TowerFrequencyUsageGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyUsageGet1_Result>("TowerFrequencyUsageGet1", idParameter);
        }
    
        public virtual ObjectResult<TowerFrequencyUsageGetForFrequency1_Result> TowerFrequencyUsageGetForFrequency1(Nullable<int> systemID, Nullable<int> towerNumber, string frequency)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerFrequencyUsageGetForFrequency1_Result>("TowerFrequencyUsageGetForFrequency1", systemIDParameter, towerNumberParameter, frequencyParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerFrequencyUsageInsert1(Nullable<int> systemID, Nullable<int> towerID, string channel, string frequency, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> cwidCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var cwidCountParameter = cwidCount.HasValue ?
                new ObjectParameter("cwidCount", cwidCount) :
                new ObjectParameter("cwidCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerFrequencyUsageInsert1", systemIDParameter, towerIDParameter, channelParameter, frequencyParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, cwidCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerFrequencyUsageUpdate1(Nullable<int> id, Nullable<int> systemID, Nullable<int> towerID, string channel, string frequency, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> cwidCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("frequency", frequency) :
                new ObjectParameter("frequency", typeof(string));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var cwidCountParameter = cwidCount.HasValue ?
                new ObjectParameter("cwidCount", cwidCount) :
                new ObjectParameter("cwidCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerFrequencyUsageUpdate1", idParameter, systemIDParameter, towerIDParameter, channelParameter, frequencyParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, cwidCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerNeighborsDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerNeighborsDelete1", idParameter);
        }
    
        public virtual int TowerNeighborsDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerNeighborsDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerNeighborsGet1_Result> TowerNeighborsGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerNeighborsGet1_Result>("TowerNeighborsGet1", idParameter);
        }
    
        public virtual int TowerRadiosDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerRadiosDelete1", idParameter);
        }
    
        public virtual int TowerRadiosDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerRadiosDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerRadiosGet1_Result> TowerRadiosGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadiosGet1_Result>("TowerRadiosGet1", idParameter);
        }
    
        public virtual ObjectResult<TowerRadiosGetRadiosForTowerWithPaging1_Result> TowerRadiosGetRadiosForTowerWithPaging1(Nullable<int> systemID, Nullable<int> towerNumber, string sortField, string sortDirection, Nullable<int> row, Nullable<int> pageSize)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var sortFieldParameter = sortField != null ?
                new ObjectParameter("sortField", sortField) :
                new ObjectParameter("sortField", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("sortDirection", sortDirection) :
                new ObjectParameter("sortDirection", typeof(string));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerRadiosGetRadiosForTowerWithPaging1_Result>("TowerRadiosGetRadiosForTowerWithPaging1", systemIDParameter, towerNumberParameter, sortFieldParameter, sortDirectionParameter, rowParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerRadiosInsert1(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerRadiosInsert1", systemIDParameter, towerNumberParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerRadiosUpdate1(Nullable<int> id, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerRadiosUpdate1", idParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowersDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowersDelete1", idParameter);
        }
    
        public virtual int TowersDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowersDeleteForSystem1", systemIDParameter);
        }
    
        public virtual int TowerTablesDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTablesDelete1", idParameter);
        }
    
        public virtual int TowerTablesDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTablesDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerTablesGet1_Result> TowerTablesGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTablesGet1_Result>("TowerTablesGet1", idParameter);
        }
    
        public virtual int TowerTalkgroupRadiosDelete1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupRadiosDelete1", idParameter);
        }
    
        public virtual int TowerTalkgroupRadiosDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupRadiosDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadiosGet1_Result> TowerTalkgroupRadiosGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadiosGet1_Result>("TowerTalkgroupRadiosGet1", idParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadiosGetRadiosForTalkgroup_Result> TowerTalkgroupRadiosGetRadiosForTalkgroup(Nullable<int> systemID, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadiosGetRadiosForTalkgroup_Result>("TowerTalkgroupRadiosGetRadiosForTalkgroup", systemIDParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadiosGetRadiosForTowerTalkgroup_Result> TowerTalkgroupRadiosGetRadiosForTowerTalkgroup(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> talkgroupID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadiosGetRadiosForTowerTalkgroup_Result>("TowerTalkgroupRadiosGetRadiosForTowerTalkgroup", systemIDParameter, towerNumberParameter, talkgroupIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadiosGetTalkgroupsForRadio_Result> TowerTalkgroupRadiosGetTalkgroupsForRadio(Nullable<int> systemID, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadiosGetTalkgroupsForRadio_Result>("TowerTalkgroupRadiosGetTalkgroupsForRadio", systemIDParameter, radioIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupRadiosGetTalkgroupsForTowerRadio_Result> TowerTalkgroupRadiosGetTalkgroupsForTowerRadio(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> radioID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupRadiosGetTalkgroupsForTowerRadio_Result>("TowerTalkgroupRadiosGetTalkgroupsForTowerRadio", systemIDParameter, towerNumberParameter, radioIDParameter);
        }
    
        public virtual int TowerTalkgroupRadiosInsert1(Nullable<int> systemID, Nullable<int> towerID, Nullable<int> talkgroupID, Nullable<int> radioID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerIDParameter = towerID.HasValue ?
                new ObjectParameter("towerID", towerID) :
                new ObjectParameter("towerID", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var radioIDParameter = radioID.HasValue ?
                new ObjectParameter("radioID", radioID) :
                new ObjectParameter("radioID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupRadiosInsert1", systemIDParameter, towerIDParameter, talkgroupIDParameter, radioIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerTalkgroupRadiosUpdate1(Nullable<int> id, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupRadiosUpdate1", idParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerTalkgroupsDelete1(string systemID, Nullable<int> towerNumber, Nullable<int> talkgroupID, Nullable<System.DateTime> date)
        {
            var systemIDParameter = systemID != null ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(string));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupsDelete1", systemIDParameter, towerNumberParameter, talkgroupIDParameter, dateParameter);
        }
    
        public virtual int TowerTalkgroupsDeleteForSystem1(Nullable<int> systemID)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupsDeleteForSystem1", systemIDParameter);
        }
    
        public virtual ObjectResult<TowerTalkgroupsGet1_Result> TowerTalkgroupsGet1(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TowerTalkgroupsGet1_Result>("TowerTalkgroupsGet1", idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> TowerTalkgroupsInsert1(Nullable<int> systemID, Nullable<int> towerNumber, Nullable<int> talkgroupID, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var systemIDParameter = systemID.HasValue ?
                new ObjectParameter("systemID", systemID) :
                new ObjectParameter("systemID", typeof(int));
    
            var towerNumberParameter = towerNumber.HasValue ?
                new ObjectParameter("towerNumber", towerNumber) :
                new ObjectParameter("towerNumber", typeof(int));
    
            var talkgroupIDParameter = talkgroupID.HasValue ?
                new ObjectParameter("talkgroupID", talkgroupID) :
                new ObjectParameter("talkgroupID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("TowerTalkgroupsInsert1", systemIDParameter, towerNumberParameter, talkgroupIDParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    
        public virtual int TowerTalkgroupsUpdate1(Nullable<int> id, Nullable<System.DateTime> date, Nullable<int> affiliationCount, Nullable<int> deniedCount, Nullable<int> voiceGrantCount, Nullable<int> emergencyVoiceGrantCount, Nullable<int> encryptedVoiceGrantCount, Nullable<int> dataCount, Nullable<int> privateDataCount, Nullable<int> alertCount, Nullable<System.DateTime> firstSeen, Nullable<System.DateTime> lastSeen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var affiliationCountParameter = affiliationCount.HasValue ?
                new ObjectParameter("affiliationCount", affiliationCount) :
                new ObjectParameter("affiliationCount", typeof(int));
    
            var deniedCountParameter = deniedCount.HasValue ?
                new ObjectParameter("deniedCount", deniedCount) :
                new ObjectParameter("deniedCount", typeof(int));
    
            var voiceGrantCountParameter = voiceGrantCount.HasValue ?
                new ObjectParameter("voiceGrantCount", voiceGrantCount) :
                new ObjectParameter("voiceGrantCount", typeof(int));
    
            var emergencyVoiceGrantCountParameter = emergencyVoiceGrantCount.HasValue ?
                new ObjectParameter("emergencyVoiceGrantCount", emergencyVoiceGrantCount) :
                new ObjectParameter("emergencyVoiceGrantCount", typeof(int));
    
            var encryptedVoiceGrantCountParameter = encryptedVoiceGrantCount.HasValue ?
                new ObjectParameter("encryptedVoiceGrantCount", encryptedVoiceGrantCount) :
                new ObjectParameter("encryptedVoiceGrantCount", typeof(int));
    
            var dataCountParameter = dataCount.HasValue ?
                new ObjectParameter("dataCount", dataCount) :
                new ObjectParameter("dataCount", typeof(int));
    
            var privateDataCountParameter = privateDataCount.HasValue ?
                new ObjectParameter("privateDataCount", privateDataCount) :
                new ObjectParameter("privateDataCount", typeof(int));
    
            var alertCountParameter = alertCount.HasValue ?
                new ObjectParameter("alertCount", alertCount) :
                new ObjectParameter("alertCount", typeof(int));
    
            var firstSeenParameter = firstSeen.HasValue ?
                new ObjectParameter("firstSeen", firstSeen) :
                new ObjectParameter("firstSeen", typeof(System.DateTime));
    
            var lastSeenParameter = lastSeen.HasValue ?
                new ObjectParameter("lastSeen", lastSeen) :
                new ObjectParameter("lastSeen", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TowerTalkgroupsUpdate1", idParameter, dateParameter, affiliationCountParameter, deniedCountParameter, voiceGrantCountParameter, emergencyVoiceGrantCountParameter, encryptedVoiceGrantCountParameter, dataCountParameter, privateDataCountParameter, alertCountParameter, firstSeenParameter, lastSeenParameter);
        }
    }
}
